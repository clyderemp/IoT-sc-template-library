/** Generated by itemis CREATE code generator. */
package smarthub.java;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import smarthub.java.Actuator_Component;
import smarthub.java.Controller_Component;
import smarthub.java.DeviceTemp_Component;
import smarthub.java.LEDLight_Unit;
import smarthub.java.Network_Component;
import smarthub.java.Power_Component;
import smarthub.java.Sensor_Component;

public class SmartLightSystem implements ITimed, IEventDriven {
	public static class System {
		private SmartLightSystem parent;
		
		public System(SmartLightSystem parent) {
			this.parent = parent;
		}
		private boolean on;
		
		
		public void raiseOn() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					on = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean off;
		
		
		public void raiseOff() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					off = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean isOn;
		
		public synchronized boolean getIsOn() {
			synchronized(parent) {
				return isOn;
			}
		}
		
		public void setIsOn(boolean value) {
			synchronized(parent) {
				this.isOn = value;
			}
		}
		
	}
	
	public static class SensorInput {
		private SmartLightSystem parent;
		
		public SensorInput(SmartLightSystem parent) {
			this.parent = parent;
		}
		private long detection_time;
		
		public synchronized long getDetection_time() {
			synchronized(parent) {
				return detection_time;
			}
		}
		
		public void setDetection_time(long value) {
			synchronized(parent) {
				this.detection_time = value;
			}
		}
		
		private long timeout_time;
		
		public synchronized long getTimeout_time() {
			synchronized(parent) {
				return timeout_time;
			}
		}
		
		public void setTimeout_time(long value) {
			synchronized(parent) {
				this.timeout_time = value;
			}
		}
		
	}
	
	public static class SensorOutput {
		private SmartLightSystem parent;
		
		public SensorOutput(SmartLightSystem parent) {
			this.parent = parent;
		}
		private long counter;
		
		public synchronized long getCounter() {
			synchronized(parent) {
				return counter;
			}
		}
		
		public void setCounter(long value) {
			synchronized(parent) {
				this.counter = value;
			}
		}
		
		private boolean activity;
		
		public synchronized boolean getActivity() {
			synchronized(parent) {
				return activity;
			}
		}
		
		public void setActivity(boolean value) {
			synchronized(parent) {
				this.activity = value;
			}
		}
		
	}
	
	protected System system;
	
	protected SensorInput sensorInput;
	
	protected SensorOutput sensorOutput;
	
	public enum State {
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_OFF,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_ON,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT_OFF,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT_OFF,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT_OFF,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT_OFF,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT_OFF,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_,
		_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE_OFF,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[7];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[8];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(SmartLightSystem.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(SmartLightSystem.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(SmartLightSystem.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(SmartLightSystem.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public SmartLightSystem() {
		system = new System(this);
		sensorInput = new SensorInput(this);
		sensorOutput = new SensorOutput(this);
		for (int i = 0; i < 7; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setActuator(null);
		
		setController(null);
		
		setSensor(null);
		
		setWiFi(null);
		
		setPower(null);
		
		setTemp(null);
		
		setLights(null);
		
		setMessage("");
		
		setWiFi_connection(false);
		
		setTemp_value(50l);
		
		setPower_input(15l);
		
		setPower_total(0l);
		
		setPower_required(10l);
		
		system.setIsOn(false);
		
		sensorInput.setDetection_time(5l);
		
		sensorInput.setTimeout_time(8l);
		
		sensorOutput.setCounter(0l);
		
		sensorOutput.setActivity(false);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence__SmartLightSystem__default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence__SmartLightSystem_();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$||stateVector[4] != State.$NULLSTATE$||stateVector[5] != State.$NULLSTATE$||stateVector[6] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		system.on = false;
		system.off = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		
		stateConfVectorPosition = 0l;
		
		switch (stateVector[0]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_OFF:
			transitioned = _SmartLightSystem__SmartLightSystem_SystemStatus_off_react(transitioned);
			break;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_ON:
			transitioned = _SmartLightSystem__SmartLightSystem_SystemStatus_on_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_:
				transitioned = _SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates__react(transitioned);
				break;
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_:
				transitioned = _SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning__react(transitioned);
				break;
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT_OFF:
				transitioned = _SmartLightSystem__SmartLightSystem_ActuatorComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_:
				transitioned = _SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates__react(transitioned);
				break;
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT_OFF:
				transitioned = _SmartLightSystem__SmartLightSystem_ControllerComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_:
				transitioned = _SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__react(transitioned);
				break;
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT_OFF:
				transitioned = _SmartLightSystem__SmartLightSystem_SensorComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<4l) {
			switch (stateVector[4]) {
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_:
				transitioned = _SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates__react(transitioned);
				break;
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT_OFF:
				transitioned = _SmartLightSystem__SmartLightSystem_NetworkComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<5l) {
			switch (stateVector[5]) {
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_:
				transitioned = _SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates__react(transitioned);
				break;
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT_OFF:
				transitioned = _SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<6l) {
			switch (stateVector[6]) {
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_:
				_SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates__react(transitioned);
				break;
			case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE_OFF:
				_SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_off_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
		} while (nextEvent());
		
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM:
			return stateVector[0].ordinal() >= State.
					_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM.ordinal()&& stateVector[0].ordinal() <= State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE_OFF.ordinal();
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_OFF:
			return stateVector[0] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_OFF;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_ON:
			return stateVector[0] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_ON;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_:
			return stateVector[1] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_:
			return stateVector[1] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT_OFF:
			return stateVector[1] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT_OFF;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT_:
			return stateVector[2].ordinal() >= State.
					_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT_.ordinal()&& stateVector[2].ordinal() <= State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_.ordinal();
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_:
			return stateVector[2] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT_OFF:
			return stateVector[2] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT_OFF;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT_:
			return stateVector[3].ordinal() >= State.
					_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT_.ordinal()&& stateVector[3].ordinal() <= State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_.ordinal();
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_:
			return stateVector[3] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT_OFF:
			return stateVector[3] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT_OFF;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT_:
			return stateVector[4].ordinal() >= State.
					_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT_.ordinal()&& stateVector[4].ordinal() <= State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_.ordinal();
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_:
			return stateVector[4] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT_OFF:
			return stateVector[4] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT_OFF;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_:
			return stateVector[5].ordinal() >= State.
					_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_.ordinal()&& stateVector[5].ordinal() <= State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_.ordinal();
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_:
			return stateVector[5] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT_OFF:
			return stateVector[5] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT_OFF;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT_:
			return stateVector[6].ordinal() >= State.
					_SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT_.ordinal()&& stateVector[6].ordinal() <= State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_.ordinal();
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_:
			return stateVector[6] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE_OFF:
			return stateVector[6] == State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE_OFF;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public System system() {
		return system;
	}
	
	public SensorInput sensorInput() {
		return sensorInput;
	}
	
	public SensorOutput sensorOutput() {
		return sensorOutput;
	}
	
	
	private Actuator_Component actuator;
	
	public synchronized Actuator_Component getActuator() {
		synchronized(SmartLightSystem.this) {
			return actuator;
		}
	}
	
	public void setActuator(Actuator_Component value) {
		synchronized(SmartLightSystem.this) {
			this.actuator = value;
		}
	}
	
	private Controller_Component controller;
	
	public synchronized Controller_Component getController() {
		synchronized(SmartLightSystem.this) {
			return controller;
		}
	}
	
	public void setController(Controller_Component value) {
		synchronized(SmartLightSystem.this) {
			this.controller = value;
		}
	}
	
	private Sensor_Component sensor;
	
	public synchronized Sensor_Component getSensor() {
		synchronized(SmartLightSystem.this) {
			return sensor;
		}
	}
	
	public void setSensor(Sensor_Component value) {
		synchronized(SmartLightSystem.this) {
			this.sensor = value;
		}
	}
	
	private Network_Component wiFi;
	
	public synchronized Network_Component getWiFi() {
		synchronized(SmartLightSystem.this) {
			return wiFi;
		}
	}
	
	public void setWiFi(Network_Component value) {
		synchronized(SmartLightSystem.this) {
			this.wiFi = value;
		}
	}
	
	private Power_Component power;
	
	public synchronized Power_Component getPower() {
		synchronized(SmartLightSystem.this) {
			return power;
		}
	}
	
	public void setPower(Power_Component value) {
		synchronized(SmartLightSystem.this) {
			this.power = value;
		}
	}
	
	private DeviceTemp_Component temp;
	
	public synchronized DeviceTemp_Component getTemp() {
		synchronized(SmartLightSystem.this) {
			return temp;
		}
	}
	
	public void setTemp(DeviceTemp_Component value) {
		synchronized(SmartLightSystem.this) {
			this.temp = value;
		}
	}
	
	private LEDLight_Unit lights;
	
	public synchronized LEDLight_Unit getLights() {
		synchronized(SmartLightSystem.this) {
			return lights;
		}
	}
	
	public void setLights(LEDLight_Unit value) {
		synchronized(SmartLightSystem.this) {
			this.lights = value;
		}
	}
	
	private String message;
	
	public synchronized String getMessage() {
		synchronized(SmartLightSystem.this) {
			return message;
		}
	}
	
	public void setMessage(String value) {
		synchronized(SmartLightSystem.this) {
			this.message = value;
		}
	}
	
	private boolean wiFi_connection;
	
	public synchronized boolean getWiFi_connection() {
		synchronized(SmartLightSystem.this) {
			return wiFi_connection;
		}
	}
	
	public void setWiFi_connection(boolean value) {
		synchronized(SmartLightSystem.this) {
			this.wiFi_connection = value;
		}
	}
	
	private long temp_value;
	
	public synchronized long getTemp_value() {
		synchronized(SmartLightSystem.this) {
			return temp_value;
		}
	}
	
	public void setTemp_value(long value) {
		synchronized(SmartLightSystem.this) {
			this.temp_value = value;
		}
	}
	
	private long power_input;
	
	public synchronized long getPower_input() {
		synchronized(SmartLightSystem.this) {
			return power_input;
		}
	}
	
	public void setPower_input(long value) {
		synchronized(SmartLightSystem.this) {
			this.power_input = value;
		}
	}
	
	private long power_total;
	
	public synchronized long getPower_total() {
		synchronized(SmartLightSystem.this) {
			return power_total;
		}
	}
	
	public void setPower_total(long value) {
		synchronized(SmartLightSystem.this) {
			this.power_total = value;
		}
	}
	
	private long power_required;
	
	public synchronized long getPower_required() {
		synchronized(SmartLightSystem.this) {
			return power_required;
		}
	}
	
	public void setPower_required(long value) {
		synchronized(SmartLightSystem.this) {
			this.power_required = value;
		}
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_SystemStatus_off() {
		system.setIsOn(false);
		
		getPower().raiseOff();
		
		getSensor().raiseOff();
		
		getLights().device().raiseOff();
	}
	
	/* Entry action for state 'on'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_SystemStatus_on() {
		timerService.setTimer(this, 0, 1000l, false);
		
		system.setIsOn(true);
		
		getPower().raiseOn();
		
		getSensor().raiseOn();
		
		getLights().device().raiseOn();
	}
	
	/* Entry action for state '<Actuator_Updates>'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates_() {
		timerService.setTimer(this, 1, 1000l, false);
		
		actuator.power().setDeviceInput(power_input);
	}
	
	/* Entry action for state '<Device_Functioning>'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning_() {
		timerService.setTimer(this, 2, (1l * 1000l), true);
		
		if (getActuator().device().getActuated()) {
			setMessage("Smart devices main function is here");
		}
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_ActuatorComponent_off() {
		getActuator().raiseOff();
		
		actuator.power().setRequired(power_required);
	}
	
	/* Entry action for state '<Controller_Updates>'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_() {
		timerService.setTimer(this, 3, 1000l, false);
		
		controller.sensors().setTriggered(sensorOutput.activity);
		
		controller.setActivity(sensorOutput.activity);
		
		actuator.setIsTriggered(controller.actuator().getTriggered());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_ControllerComponent_off() {
		getController().raiseOff();
	}
	
	/* Entry action for state '<Sensor_Updates>'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_() {
		timerService.setTimer(this, 4, 1000l, false);
		
		sensor.setSimulate_detection_timer(sensorInput.detection_time);
		
		sensorOutput.setActivity(sensor.getActivity());
		
		sensorOutput.setCounter(sensor.getCounter());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_SensorComponent_off() {
		getSensor().raiseOff();
	}
	
	/* Entry action for state '<WiFi_Updates>'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_() {
		timerService.setTimer(this, 5, 1000l, false);
		
		setWiFi_connection(wiFi.getConnection());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_NetworkComponent_off() {
		getWiFi().raiseOff();
	}
	
	/* Entry action for state '<Power_Updates>'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_() {
		timerService.setTimer(this, 6, 1000l, false);
		
		power.device().setIsOn(system.isOn);
		
		power.setKilowatt(power_input);
		
		setPower_total(power.getKWh());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off() {
		getPower().raiseOff();
	}
	
	/* Entry action for state '<Temperature_Updates>'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_() {
		timerService.setTimer(this, 7, 500l, false);
		
		setTemp_value(temp.heat().getLevel());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_off() {
		temp.device().setIsOn(system.isOn);
	}
	
	/* Exit action for state 'on'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_SystemStatus_on() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state '<Actuator_Updates>'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates_() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state '<Device_Functioning>'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning_() {
		timerService.unsetTimer(this, 2);
		
		lights.bulb().setIsOn(actuator.getIsTriggered());
	}
	
	/* Exit action for state 'off'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_ActuatorComponent_off() {
		getActuator().raiseOn();
	}
	
	/* Exit action for state '<Controller_Updates>'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_ControllerComponent_off() {
		getController().raiseOn();
	}
	
	/* Exit action for state '<Sensor_Updates>'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_SensorComponent_off() {
		getSensor().raiseOn();
	}
	
	/* Exit action for state '<WiFi_Updates>'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_NetworkComponent_off() {
		getWiFi().raiseOn();
	}
	
	/* Exit action for state '<Power_Updates>'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_() {
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off() {
		getPower().raiseOn();
	}
	
	/* Exit action for state '<Temperature_Updates>'. */
	private void exitAction__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_() {
		timerService.unsetTimer(this, 7);
	}
	
	/* 'default' enter sequence for state SmartLightSystem */
	private void enterSequence__SmartLightSystem__SmartLightSystem_default() {
		enterSequence__SmartLightSystem__SmartLightSystem_SystemStatus_default();
		enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent_default();
		enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent_default();
		enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent_default();
		enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent_default();
		enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_default();
		enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_default();
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartLightSystem__SmartLightSystem_SystemStatus_off_default() {
		entryAction__SmartLightSystem__SmartLightSystem_SystemStatus_off();
		stateVector[0] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state on */
	private void enterSequence__SmartLightSystem__SmartLightSystem_SystemStatus_on_default() {
		entryAction__SmartLightSystem__SmartLightSystem_SystemStatus_on();
		stateVector[0] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_ON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state <Actuator_Updates> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates__default() {
		entryAction__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates_();
		stateVector[1] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <Device_Functioning> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning__default() {
		entryAction__SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning_();
		stateVector[1] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent_off_default() {
		entryAction__SmartLightSystem__SmartLightSystem_ActuatorComponent_off();
		stateVector[1] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT_OFF;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <Initialize_Controller_Component> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__default() {
		enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating_default();
	}
	
	/* 'default' enter sequence for state <Controller_Updates> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates__default() {
		entryAction__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_();
		stateVector[2] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent_off_default() {
		entryAction__SmartLightSystem__SmartLightSystem_ControllerComponent_off();
		stateVector[2] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT_OFF;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state <Initialize_Sensor_Component> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__default() {
		enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating_default();
	}
	
	/* 'default' enter sequence for state <Sensor_Updates> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__default() {
		entryAction__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
		stateVector[3] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent_off_default() {
		entryAction__SmartLightSystem__SmartLightSystem_SensorComponent_off();
		stateVector[3] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT_OFF;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state <Initialize_WiFi_Component> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__default() {
		enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating_default();
	}
	
	/* 'default' enter sequence for state <WiFi_Updates> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates__default() {
		entryAction__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_();
		stateVector[4] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent_off_default() {
		entryAction__SmartLightSystem__SmartLightSystem_NetworkComponent_off();
		stateVector[4] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT_OFF;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state <Initialize_Power_Component> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__default() {
		enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating_default();
	}
	
	/* 'default' enter sequence for state <Power_Updates> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates__default() {
		entryAction__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_();
		stateVector[5] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off_default() {
		entryAction__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off();
		stateVector[5] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT_OFF;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state <Initialize_DeviceTemp_Component> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__default() {
		enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating_default();
	}
	
	/* 'default' enter sequence for state <Temperature_Updates> */
	private void enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates__default() {
		entryAction__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_();
		stateVector[6] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_;
		stateConfVectorPosition = 6;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_off_default() {
		entryAction__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_off();
		stateVector[6] = State._SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE_OFF;
		stateConfVectorPosition = 6;
	}
	
	/* 'default' enter sequence for region <SmartLightSystem> */
	private void enterSequence__SmartLightSystem__default() {
		react__SmartLightSystem___entry_Default();
	}
	
	/* 'default' enter sequence for region SystemStatus */
	private void enterSequence__SmartLightSystem__SmartLightSystem_SystemStatus_default() {
		react__SmartLightSystem__SmartLightSystem_SystemStatus__entry_Default();
	}
	
	/* 'default' enter sequence for region ActuatorComponent */
	private void enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent_default() {
		react__SmartLightSystem__SmartLightSystem_ActuatorComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region ControllerComponent */
	private void enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent_default() {
		react__SmartLightSystem__SmartLightSystem_ControllerComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region updating */
	private void enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating_default() {
		react__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__entry_Default();
	}
	
	/* 'default' enter sequence for region SensorComponent */
	private void enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent_default() {
		react__SmartLightSystem__SmartLightSystem_SensorComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region updating */
	private void enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating_default() {
		react__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__entry_Default();
	}
	
	/* 'default' enter sequence for region NetworkComponent */
	private void enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent_default() {
		react__SmartLightSystem__SmartLightSystem_NetworkComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region updating */
	private void enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating_default() {
		react__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__entry_Default();
	}
	
	/* 'default' enter sequence for region PowerCalculatorComponent */
	private void enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_default() {
		react__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region updating */
	private void enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating_default() {
		react__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__entry_Default();
	}
	
	/* 'default' enter sequence for region trackingDeviceTemperature */
	private void enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_default() {
		react__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__entry_Default();
	}
	
	/* 'default' enter sequence for region updating */
	private void enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating_default() {
		react__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__entry_Default();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartLightSystem__SmartLightSystem_SystemStatus_off() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state on */
	private void exitSequence__SmartLightSystem__SmartLightSystem_SystemStatus_on() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction__SmartLightSystem__SmartLightSystem_SystemStatus_on();
	}
	
	/* Default exit sequence for state <Actuator_Updates> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates_() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates_();
	}
	
	/* Default exit sequence for state <Device_Functioning> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning_() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction__SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent_off() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction__SmartLightSystem__SmartLightSystem_ActuatorComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_Controller_Component> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component_() {
		exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating();
	}
	
	/* Default exit sequence for state <Controller_Updates> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		
		exitAction__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent_off() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		
		exitAction__SmartLightSystem__SmartLightSystem_ControllerComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_Sensor_Component> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component_() {
		exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating();
	}
	
	/* Default exit sequence for state <Sensor_Updates> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent_off() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction__SmartLightSystem__SmartLightSystem_SensorComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_WiFi_Component> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component_() {
		exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating();
	}
	
	/* Default exit sequence for state <WiFi_Updates> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
		
		exitAction__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent_off() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
		
		exitAction__SmartLightSystem__SmartLightSystem_NetworkComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_Power_Component> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component_() {
		exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating();
	}
	
	/* Default exit sequence for state <Power_Updates> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_() {
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
		
		exitAction__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off() {
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
		
		exitAction__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_DeviceTemp_Component> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component_() {
		exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating();
	}
	
	/* Default exit sequence for state <Temperature_Updates> */
	private void exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_() {
		stateVector[6] = State.$NULLSTATE$;
		stateConfVectorPosition = 6;
		
		exitAction__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_off() {
		stateVector[6] = State.$NULLSTATE$;
		stateConfVectorPosition = 6;
	}
	
	/* Default exit sequence for region <SmartLightSystem> */
	private void exitSequence__SmartLightSystem_() {
		switch (stateVector[0]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_OFF:
			exitSequence__SmartLightSystem__SmartLightSystem_SystemStatus_off();
			break;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SYSTEMSTATUS_ON:
			exitSequence__SmartLightSystem__SmartLightSystem_SystemStatus_on();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates_();
			break;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_:
			exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning_();
			break;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_ACTUATORCOMPONENT_OFF:
			exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_();
			break;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT_OFF:
			exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
			break;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT_OFF:
			exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[4]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_();
			break;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT_OFF:
			exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[5]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_();
			break;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT_OFF:
			exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[6]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_();
			break;
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE_OFF:
			exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_off();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region updating */
	private void exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating() {
		switch (stateVector[2]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region updating */
	private void exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating() {
		switch (stateVector[3]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region updating */
	private void exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating() {
		switch (stateVector[4]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region updating */
	private void exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating() {
		switch (stateVector[5]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region updating */
	private void exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating() {
		switch (stateVector[6]) {
		case _SMARTLIGHTSYSTEM__SMARTLIGHTSYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_:
			exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_SystemStatus__entry_Default() {
		getLights().enter();
		
		enterSequence__SmartLightSystem__SmartLightSystem_SystemStatus_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_ActuatorComponent__entry_Default() {
		getActuator().enter();
		
		enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_ControllerComponent__entry_Default() {
		getController().enter();
		
		enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__entry_Default() {
		enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_SensorComponent__entry_Default() {
		getSensor().enter();
		
		enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__entry_Default() {
		enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_NetworkComponent__entry_Default() {
		getWiFi().enter();
		
		enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__entry_Default() {
		enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__entry_Default() {
		getPower().enter();
		
		enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__entry_Default() {
		enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__entry_Default() {
		getTemp().enter();
		
		enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__entry_Default() {
		enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__SmartLightSystem___entry_Default() {
		enterSequence__SmartLightSystem__SmartLightSystem_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long _SmartLightSystem__SmartLightSystem_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = react(transitioned_before);
		
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_SystemStatus_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (system.on) {
				exitSequence__SmartLightSystem__SmartLightSystem_SystemStatus_off();
				enterSequence__SmartLightSystem__SmartLightSystem_SystemStatus_on_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_SystemStatus_on_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (system.off) {
				exitSequence__SmartLightSystem__SmartLightSystem_SystemStatus_on();
				enterSequence__SmartLightSystem__SmartLightSystem_SystemStatus_off_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence__SmartLightSystem__SmartLightSystem_SystemStatus_on();
					timeEvents[0] = false;
					enterSequence__SmartLightSystem__SmartLightSystem_SystemStatus_on_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (getActuator().getIsTriggered()) {
				exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates_();
				enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning__default();
				transitioned_after = 1l;
			} else {
				if (system.off) {
					exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates_();
					enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent_off_default();
					transitioned_after = 1l;
				} else {
					if (timeEvents[1]) {
						exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates_();
						timeEvents[1] = false;
						enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates__default();
						transitioned_after = 1l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (!getActuator().getIsTriggered()) {
				exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning_();
				enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates__default();
				transitioned_after = 1l;
			} else {
				if (system.off) {
					exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Device_Functioning_();
					enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent_off_default();
					transitioned_after = 1l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			if (timeEvents[2]) {
				lights.bulb().setIsOn(actuator.getIsTriggered());
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_ActuatorComponent_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (system.on) {
				exitSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent_off();
				enterSequence__SmartLightSystem__SmartLightSystem_ActuatorComponent__Actuator_Updates__default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (system.off) {
				exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component_();
				enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent_off_default();
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (timeEvents[3]) {
				exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_();
				timeEvents[3] = false;
				enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates__default();
				_SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__react(2l);
				
				transitioned_after = 2l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = _SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_ControllerComponent_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (system.on) {
				exitSequence__SmartLightSystem__SmartLightSystem_ControllerComponent_off();
				enterSequence__SmartLightSystem__SmartLightSystem_ControllerComponent__Initialize_Controller_Component__default();
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (system.off) {
				exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component_();
				enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent_off_default();
				transitioned_after = 3l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (timeEvents[4]) {
				exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
				timeEvents[4] = false;
				enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__default();
				_SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__react(3l);
				
				transitioned_after = 3l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = _SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_SensorComponent_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (system.on) {
				exitSequence__SmartLightSystem__SmartLightSystem_SensorComponent_off();
				enterSequence__SmartLightSystem__SmartLightSystem_SensorComponent__Initialize_Sensor_Component__default();
				transitioned_after = 3l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (system.off) {
				exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component_();
				enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent_off_default();
				transitioned_after = 4l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (timeEvents[5]) {
				exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_();
				timeEvents[5] = false;
				enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates__default();
				_SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__react(4l);
				
				transitioned_after = 4l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = _SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_NetworkComponent_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (system.on) {
				exitSequence__SmartLightSystem__SmartLightSystem_NetworkComponent_off();
				enterSequence__SmartLightSystem__SmartLightSystem_NetworkComponent__Initialize_WiFi_Component__default();
				transitioned_after = 4l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
			if (system.off) {
				exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component_();
				enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off_default();
				transitioned_after = 5l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
			if (timeEvents[6]) {
				exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_();
				timeEvents[6] = false;
				enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates__default();
				_SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__react(5l);
				
				transitioned_after = 5l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = _SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
			if (system.on) {
				exitSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent_off();
				enterSequence__SmartLightSystem__SmartLightSystem_PowerCalculatorComponent__Initialize_Power_Component__default();
				transitioned_after = 5l;
			}
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<6l) {
			if (system.off) {
				exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component_();
				enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_off_default();
				_SmartLightSystem__SmartLightSystem_react(0l);
				
				transitioned_after = 6l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = _SmartLightSystem__SmartLightSystem_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<6l) {
			if (timeEvents[7]) {
				exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_();
				timeEvents[7] = false;
				enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates__default();
				_SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__react(6l);
				
				transitioned_after = 6l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = _SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<6l) {
			if (system.on) {
				exitSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature_off();
				enterSequence__SmartLightSystem__SmartLightSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__default();
				_SmartLightSystem__SmartLightSystem_react(0l);
				
				transitioned_after = 6l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = _SmartLightSystem__SmartLightSystem_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public synchronized void triggerWithoutEvent() {
		runCycle();
	}
}
