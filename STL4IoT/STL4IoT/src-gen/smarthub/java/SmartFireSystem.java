/** Generated by itemis CREATE code generator. */
package smarthub.java;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import smarthub.java.Actuator_Component;
import smarthub.java.Controller_Component;
import smarthub.java.DeviceTemp_Component;
import smarthub.java.FireAlarm_Unit;
import smarthub.java.Network_Component;
import smarthub.java.Power_Component;
import smarthub.java.Sensor_Component;

public class SmartFireSystem implements ITimed, IEventDriven {
	public static class System {
		private SmartFireSystem parent;
		
		public System(SmartFireSystem parent) {
			this.parent = parent;
		}
		private boolean on;
		
		
		public void raiseOn() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					on = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean off;
		
		
		public void raiseOff() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					off = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean isOn;
		
		public synchronized boolean getIsOn() {
			synchronized(parent) {
				return isOn;
			}
		}
		
		public void setIsOn(boolean value) {
			synchronized(parent) {
				this.isOn = value;
			}
		}
		
		private boolean alarm_status;
		
		public synchronized boolean getAlarm_status() {
			synchronized(parent) {
				return alarm_status;
			}
		}
		
		public void setAlarm_status(boolean value) {
			synchronized(parent) {
				this.alarm_status = value;
			}
		}
		
	}
	
	public static class SensorInput {
		private SmartFireSystem parent;
		
		public SensorInput(SmartFireSystem parent) {
			this.parent = parent;
		}
		private long smoke_detection_time;
		
		public synchronized long getSmoke_detection_time() {
			synchronized(parent) {
				return smoke_detection_time;
			}
		}
		
		public void setSmoke_detection_time(long value) {
			synchronized(parent) {
				this.smoke_detection_time = value;
			}
		}
		
		private long carbon_detection_time;
		
		public synchronized long getCarbon_detection_time() {
			synchronized(parent) {
				return carbon_detection_time;
			}
		}
		
		public void setCarbon_detection_time(long value) {
			synchronized(parent) {
				this.carbon_detection_time = value;
			}
		}
		
		private long heat_detection_time;
		
		public synchronized long getHeat_detection_time() {
			synchronized(parent) {
				return heat_detection_time;
			}
		}
		
		public void setHeat_detection_time(long value) {
			synchronized(parent) {
				this.heat_detection_time = value;
			}
		}
		
	}
	
	public static class SensorOutput {
		private SmartFireSystem parent;
		
		public SensorOutput(SmartFireSystem parent) {
			this.parent = parent;
		}
		private boolean activity;
		
		public synchronized boolean getActivity() {
			synchronized(parent) {
				return activity;
			}
		}
		
		public void setActivity(boolean value) {
			synchronized(parent) {
				this.activity = value;
			}
		}
		
	}
	
	public static class CarbonSensorOutput {
		private SmartFireSystem parent;
		
		public CarbonSensorOutput(SmartFireSystem parent) {
			this.parent = parent;
		}
		private long counter;
		
		public synchronized long getCounter() {
			synchronized(parent) {
				return counter;
			}
		}
		
		public void setCounter(long value) {
			synchronized(parent) {
				this.counter = value;
			}
		}
		
		private boolean activity;
		
		public synchronized boolean getActivity() {
			synchronized(parent) {
				return activity;
			}
		}
		
		public void setActivity(boolean value) {
			synchronized(parent) {
				this.activity = value;
			}
		}
		
	}
	
	public static class HeatSensorOutput {
		private SmartFireSystem parent;
		
		public HeatSensorOutput(SmartFireSystem parent) {
			this.parent = parent;
		}
		private long counter;
		
		public synchronized long getCounter() {
			synchronized(parent) {
				return counter;
			}
		}
		
		public void setCounter(long value) {
			synchronized(parent) {
				this.counter = value;
			}
		}
		
		private boolean activity;
		
		public synchronized boolean getActivity() {
			synchronized(parent) {
				return activity;
			}
		}
		
		public void setActivity(boolean value) {
			synchronized(parent) {
				this.activity = value;
			}
		}
		
	}
	
	public static class SmokeSensorOutput {
		private SmartFireSystem parent;
		
		public SmokeSensorOutput(SmartFireSystem parent) {
			this.parent = parent;
		}
		private long counter;
		
		public synchronized long getCounter() {
			synchronized(parent) {
				return counter;
			}
		}
		
		public void setCounter(long value) {
			synchronized(parent) {
				this.counter = value;
			}
		}
		
		private boolean activity;
		
		public synchronized boolean getActivity() {
			synchronized(parent) {
				return activity;
			}
		}
		
		public void setActivity(boolean value) {
			synchronized(parent) {
				this.activity = value;
			}
		}
		
	}
	
	protected System system;
	
	protected SensorInput sensorInput;
	
	protected SensorOutput sensorOutput;
	
	protected CarbonSensorOutput carbonSensorOutput;
	
	protected HeatSensorOutput heatSensorOutput;
	
	protected SmokeSensorOutput smokeSensorOutput;
	
	public enum State {
		MAIN_REGION_SMARTFIRESYSTEM,
		MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_OFF,
		MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_ON,
		MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_,
		MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_,
		MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT_OFF,
		MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT_,
		MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_,
		MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF,
		MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT_,
		MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_,
		MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_CARBONDETECTED,
		MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_SMOKEDETECTED,
		MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_HEATDETECTED,
		MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1__FINAL_,
		MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT_OFF,
		MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT_,
		MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_,
		MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF,
		MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_,
		MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_,
		MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF,
		MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT_,
		MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_,
		MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE_OFF,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[7];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[8];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(SmartFireSystem.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(SmartFireSystem.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(SmartFireSystem.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(SmartFireSystem.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public SmartFireSystem() {
		system = new System(this);
		sensorInput = new SensorInput(this);
		sensorOutput = new SensorOutput(this);
		carbonSensorOutput = new CarbonSensorOutput(this);
		heatSensorOutput = new HeatSensorOutput(this);
		smokeSensorOutput = new SmokeSensorOutput(this);
		for (int i = 0; i < 7; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setActuator(null);
		
		setController(null);
		
		setCarbonSensor(null);
		
		setSmokeSensor(null);
		
		setHeatSensor(null);
		
		setWiFi(null);
		
		setPower(null);
		
		setTemp(null);
		
		setFireAlarm(null);
		
		setMessage("");
		
		setWiFi_connection(false);
		
		setTemp_value(50l);
		
		setPower_input(20l);
		
		setPower_total(0l);
		
		setPower_required(10l);
		
		system.setIsOn(false);
		
		system.setAlarm_status(false);
		
		sensorInput.setSmoke_detection_time(2l);
		
		sensorInput.setCarbon_detection_time(4l);
		
		sensorInput.setHeat_detection_time(1l);
		
		sensorOutput.setActivity(false);
		
		carbonSensorOutput.setCounter(0l);
		
		carbonSensorOutput.setActivity(false);
		
		heatSensorOutput.setCounter(0l);
		
		heatSensorOutput.setActivity(false);
		
		smokeSensorOutput.setCounter(0l);
		
		smokeSensorOutput.setActivity(false);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$||stateVector[4] != State.$NULLSTATE$||stateVector[5] != State.$NULLSTATE$||stateVector[6] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		handleDetection = false;
		system.on = false;
		system.off = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		
		stateConfVectorPosition = 0l;
		
		switch (stateVector[0]) {
		case MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_OFF:
			transitioned = main_region_SmartFireSystem_DeviceStatus_off_react(transitioned);
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_ON:
			transitioned = main_region_SmartFireSystem_DeviceStatus_on_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_:
				transitioned = main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates__react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_:
				transitioned = main_region_SmartFireSystem_ActuatorComponent__Device_Functioning__react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT_OFF:
				transitioned = main_region_SmartFireSystem_ActuatorComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_:
				transitioned = main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates__react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF:
				transitioned = main_region_SmartFireSystem_ControllerComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_CARBONDETECTED:
				transitioned = main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_CarbonDetected_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_SMOKEDETECTED:
				transitioned = main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_SmokeDetected_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_HEATDETECTED:
				transitioned = main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_HeatDetected_react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1__FINAL_:
				transitioned = main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__final__react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT_OFF:
				transitioned = main_region_SmartFireSystem_SensorComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<4l) {
			switch (stateVector[4]) {
			case MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_:
				transitioned = main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates__react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF:
				transitioned = main_region_SmartFireSystem_NetworkComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<5l) {
			switch (stateVector[5]) {
			case MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_:
				transitioned = main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates__react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF:
				transitioned = main_region_SmartFireSystem_PowerCalculatorComponent_off_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<6l) {
			switch (stateVector[6]) {
			case MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_:
				main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates__react(transitioned);
				break;
			case MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE_OFF:
				main_region_SmartFireSystem_trackingDeviceTemperature_off_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
		} while (nextEvent());
		
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_SMARTFIRESYSTEM:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE_OFF.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_OFF:
			return stateVector[0] == State.MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_OFF;
		case MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_ON:
			return stateVector[0] == State.MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_ON;
		case MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_:
			return stateVector[1] == State.MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_;
		case MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_:
			return stateVector[1] == State.MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_;
		case MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT_OFF:
			return stateVector[1] == State.MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT_OFF;
		case MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT_:
			return stateVector[2].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT_.ordinal()&& stateVector[2].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_:
			return stateVector[2] == State.MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_;
		case MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF:
			return stateVector[2] == State.MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT_:
			return stateVector[3].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT_.ordinal()&& stateVector[3].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1__FINAL_.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_:
			return stateVector[3].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES_.ordinal()&& stateVector[3].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1__FINAL_.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_CARBONDETECTED:
			return stateVector[3] == State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_CARBONDETECTED;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_SMOKEDETECTED:
			return stateVector[3] == State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_SMOKEDETECTED;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_HEATDETECTED:
			return stateVector[3] == State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_HEATDETECTED;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1__FINAL_:
			return stateVector[3] == State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1__FINAL_;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT_OFF:
			return stateVector[3] == State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT_OFF;
		case MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT_:
			return stateVector[4].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT_.ordinal()&& stateVector[4].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_:
			return stateVector[4] == State.MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_;
		case MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF:
			return stateVector[4] == State.MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF;
		case MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_:
			return stateVector[5].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT_.ordinal()&& stateVector[5].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_:
			return stateVector[5] == State.MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_;
		case MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF:
			return stateVector[5] == State.MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF;
		case MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT_:
			return stateVector[6].ordinal() >= State.
					MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT_.ordinal()&& stateVector[6].ordinal() <= State.MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_.ordinal();
		case MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_:
			return stateVector[6] == State.MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_;
		case MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE_OFF:
			return stateVector[6] == State.MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE_OFF;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public System system() {
		return system;
	}
	
	public SensorInput sensorInput() {
		return sensorInput;
	}
	
	public SensorOutput sensorOutput() {
		return sensorOutput;
	}
	
	public CarbonSensorOutput carbonSensorOutput() {
		return carbonSensorOutput;
	}
	
	public HeatSensorOutput heatSensorOutput() {
		return heatSensorOutput;
	}
	
	public SmokeSensorOutput smokeSensorOutput() {
		return smokeSensorOutput;
	}
	
	
	private boolean handleDetection;
	
	
	public void raiseHandleDetection() {
		synchronized(SmartFireSystem.this) {
			inEventQueue.add(() -> {
				handleDetection = true;
			});
			runCycle();
		}
	}
	
	private Actuator_Component actuator;
	
	public synchronized Actuator_Component getActuator() {
		synchronized(SmartFireSystem.this) {
			return actuator;
		}
	}
	
	public void setActuator(Actuator_Component value) {
		synchronized(SmartFireSystem.this) {
			this.actuator = value;
		}
	}
	
	private Controller_Component controller;
	
	public synchronized Controller_Component getController() {
		synchronized(SmartFireSystem.this) {
			return controller;
		}
	}
	
	public void setController(Controller_Component value) {
		synchronized(SmartFireSystem.this) {
			this.controller = value;
		}
	}
	
	private Sensor_Component carbonSensor;
	
	public synchronized Sensor_Component getCarbonSensor() {
		synchronized(SmartFireSystem.this) {
			return carbonSensor;
		}
	}
	
	public void setCarbonSensor(Sensor_Component value) {
		synchronized(SmartFireSystem.this) {
			this.carbonSensor = value;
		}
	}
	
	private Sensor_Component smokeSensor;
	
	public synchronized Sensor_Component getSmokeSensor() {
		synchronized(SmartFireSystem.this) {
			return smokeSensor;
		}
	}
	
	public void setSmokeSensor(Sensor_Component value) {
		synchronized(SmartFireSystem.this) {
			this.smokeSensor = value;
		}
	}
	
	private Sensor_Component heatSensor;
	
	public synchronized Sensor_Component getHeatSensor() {
		synchronized(SmartFireSystem.this) {
			return heatSensor;
		}
	}
	
	public void setHeatSensor(Sensor_Component value) {
		synchronized(SmartFireSystem.this) {
			this.heatSensor = value;
		}
	}
	
	private Network_Component wiFi;
	
	public synchronized Network_Component getWiFi() {
		synchronized(SmartFireSystem.this) {
			return wiFi;
		}
	}
	
	public void setWiFi(Network_Component value) {
		synchronized(SmartFireSystem.this) {
			this.wiFi = value;
		}
	}
	
	private Power_Component power;
	
	public synchronized Power_Component getPower() {
		synchronized(SmartFireSystem.this) {
			return power;
		}
	}
	
	public void setPower(Power_Component value) {
		synchronized(SmartFireSystem.this) {
			this.power = value;
		}
	}
	
	private DeviceTemp_Component temp;
	
	public synchronized DeviceTemp_Component getTemp() {
		synchronized(SmartFireSystem.this) {
			return temp;
		}
	}
	
	public void setTemp(DeviceTemp_Component value) {
		synchronized(SmartFireSystem.this) {
			this.temp = value;
		}
	}
	
	private FireAlarm_Unit fireAlarm;
	
	public synchronized FireAlarm_Unit getFireAlarm() {
		synchronized(SmartFireSystem.this) {
			return fireAlarm;
		}
	}
	
	public void setFireAlarm(FireAlarm_Unit value) {
		synchronized(SmartFireSystem.this) {
			this.fireAlarm = value;
		}
	}
	
	private String message;
	
	public synchronized String getMessage() {
		synchronized(SmartFireSystem.this) {
			return message;
		}
	}
	
	public void setMessage(String value) {
		synchronized(SmartFireSystem.this) {
			this.message = value;
		}
	}
	
	private boolean wiFi_connection;
	
	public synchronized boolean getWiFi_connection() {
		synchronized(SmartFireSystem.this) {
			return wiFi_connection;
		}
	}
	
	public void setWiFi_connection(boolean value) {
		synchronized(SmartFireSystem.this) {
			this.wiFi_connection = value;
		}
	}
	
	private long temp_value;
	
	public synchronized long getTemp_value() {
		synchronized(SmartFireSystem.this) {
			return temp_value;
		}
	}
	
	public void setTemp_value(long value) {
		synchronized(SmartFireSystem.this) {
			this.temp_value = value;
		}
	}
	
	private long power_input;
	
	public synchronized long getPower_input() {
		synchronized(SmartFireSystem.this) {
			return power_input;
		}
	}
	
	public void setPower_input(long value) {
		synchronized(SmartFireSystem.this) {
			this.power_input = value;
		}
	}
	
	private long power_total;
	
	public synchronized long getPower_total() {
		synchronized(SmartFireSystem.this) {
			return power_total;
		}
	}
	
	public void setPower_total(long value) {
		synchronized(SmartFireSystem.this) {
			this.power_total = value;
		}
	}
	
	private long power_required;
	
	public synchronized long getPower_required() {
		synchronized(SmartFireSystem.this) {
			return power_required;
		}
	}
	
	public void setPower_required(long value) {
		synchronized(SmartFireSystem.this) {
			this.power_required = value;
		}
	}
	
	/* Entry action for state 'off'. */
	private void entryAction_main_region_SmartFireSystem_DeviceStatus_off() {
		system.setIsOn(false);
		
		getPower().raiseOff();
		
		getCarbonSensor().raiseOff();
		
		getSmokeSensor().raiseOff();
		
		getHeatSensor().raiseOff();
	}
	
	/* Entry action for state 'on'. */
	private void entryAction_main_region_SmartFireSystem_DeviceStatus_on() {
		timerService.setTimer(this, 0, 1000l, false);
		
		system.setIsOn(true);
		
		system.setAlarm_status(fireAlarm.alarm().getSound());
		
		getPower().raiseOn();
		
		getCarbonSensor().raiseOn();
		
		getSmokeSensor().raiseOn();
		
		getHeatSensor().raiseOn();
	}
	
	/* Entry action for state '<Actuator_Updates>'. */
	private void entryAction_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates_() {
		timerService.setTimer(this, 1, 200l, false);
		
		actuator.power().setDeviceInput(power_input);
		
		fireAlarm.sensors().setTriggerSignal_received(actuator.getIsTriggered());
	}
	
	/* Entry action for state '<Device_Functioning>'. */
	private void entryAction_main_region_SmartFireSystem_ActuatorComponent__Device_Functioning_() {
		timerService.setTimer(this, 2, 500l, true);
		
		system.raiseOn();
		
		setMessage(fireAlarm.message().getStatus());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction_main_region_SmartFireSystem_ActuatorComponent_off() {
		getActuator().raiseOff();
		
		actuator.power().setRequired(power_required);
	}
	
	/* Entry action for state '<Controller_Updates>'. */
	private void entryAction_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_() {
		timerService.setTimer(this, 3, 100l, false);
		
		controller.sensors().setTriggered(sensorOutput.activity);
		
		controller.setActivity(sensorOutput.activity);
		
		actuator.setIsTriggered(controller.actuator().getTriggered());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction_main_region_SmartFireSystem_ControllerComponent_off() {
		getController().raiseOff();
	}
	
	/* Entry action for state '<Sensor_Updates>'. */
	private void entryAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_() {
		timerService.setTimer(this, 4, 500l, false);
		
		smokeSensor.setSimulate_detection_timer(sensorInput.smoke_detection_time);
		
		carbonSensor.setSimulate_detection_timer(sensorInput.carbon_detection_time);
		
		heatSensor.setSimulate_detection_timer(sensorInput.heat_detection_time);
		
		carbonSensorOutput.setActivity(carbonSensor.getActivity());
		
		carbonSensorOutput.setCounter(carbonSensor.getCounter());
		
		heatSensorOutput.setActivity(heatSensor.getActivity());
		
		heatSensorOutput.setCounter(heatSensor.getCounter());
		
		smokeSensorOutput.setActivity(smokeSensor.getActivity());
		
		smokeSensorOutput.setCounter(smokeSensor.getCounter());
	}
	
	/* Entry action for state 'CarbonDetected'. */
	private void entryAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_CarbonDetected() {
		sensorOutput.setActivity(carbonSensorOutput.activity);
	}
	
	/* Entry action for state 'SmokeDetected'. */
	private void entryAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_SmokeDetected() {
		sensorOutput.setActivity(smokeSensorOutput.activity);
	}
	
	/* Entry action for state 'HeatDetected'. */
	private void entryAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_HeatDetected() {
		sensorOutput.setActivity(heatSensorOutput.activity);
	}
	
	/* Entry action for state 'off'. */
	private void entryAction_main_region_SmartFireSystem_SensorComponent_off() {
		getCarbonSensor().raiseOff();
		
		getSmokeSensor().raiseOff();
		
		getHeatSensor().raiseOff();
	}
	
	/* Entry action for state '<WiFi_Updates>'. */
	private void entryAction_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_() {
		timerService.setTimer(this, 5, 1000l, false);
		
		setWiFi_connection(wiFi.getConnection());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction_main_region_SmartFireSystem_NetworkComponent_off() {
		getWiFi().raiseOff();
	}
	
	/* Entry action for state '<Power_Updates>'. */
	private void entryAction_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_() {
		timerService.setTimer(this, 6, 1000l, false);
		
		power.device().setIsOn(system.isOn);
		
		power.setKilowatt(power_input);
		
		setPower_total(power.getKWh());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction_main_region_SmartFireSystem_PowerCalculatorComponent_off() {
		getPower().raiseOff();
	}
	
	/* Entry action for state '<Temperature_Updates>'. */
	private void entryAction_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_() {
		timerService.setTimer(this, 7, 1000l, false);
		
		setTemp_value(temp.heat().getLevel());
	}
	
	/* Entry action for state 'off'. */
	private void entryAction_main_region_SmartFireSystem_trackingDeviceTemperature_off() {
		temp.device().setIsOn(system.isOn);
	}
	
	/* Exit action for state 'on'. */
	private void exitAction_main_region_SmartFireSystem_DeviceStatus_on() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state '<Actuator_Updates>'. */
	private void exitAction_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates_() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state '<Device_Functioning>'. */
	private void exitAction_main_region_SmartFireSystem_ActuatorComponent__Device_Functioning_() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction_main_region_SmartFireSystem_ActuatorComponent_off() {
		getActuator().raiseOn();
	}
	
	/* Exit action for state '<Controller_Updates>'. */
	private void exitAction_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction_main_region_SmartFireSystem_ControllerComponent_off() {
		getController().raiseOn();
	}
	
	/* Exit action for state '<Sensor_Updates>'. */
	private void exitAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction_main_region_SmartFireSystem_SensorComponent_off() {
		getCarbonSensor().raiseOn();
		
		getSmokeSensor().raiseOn();
		
		getHeatSensor().raiseOn();
	}
	
	/* Exit action for state '<WiFi_Updates>'. */
	private void exitAction_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction_main_region_SmartFireSystem_NetworkComponent_off() {
		getWiFi().raiseOn();
	}
	
	/* Exit action for state '<Power_Updates>'. */
	private void exitAction_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_() {
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'off'. */
	private void exitAction_main_region_SmartFireSystem_PowerCalculatorComponent_off() {
		getPower().raiseOn();
	}
	
	/* Exit action for state '<Temperature_Updates>'. */
	private void exitAction_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_() {
		timerService.unsetTimer(this, 7);
	}
	
	/* 'default' enter sequence for state SmartFireSystem */
	private void enterSequence_main_region_SmartFireSystem_default() {
		enterSequence_main_region_SmartFireSystem_DeviceStatus_default();
		enterSequence_main_region_SmartFireSystem_ActuatorComponent_default();
		enterSequence_main_region_SmartFireSystem_ControllerComponent_default();
		enterSequence_main_region_SmartFireSystem_SensorComponent_default();
		enterSequence_main_region_SmartFireSystem_NetworkComponent_default();
		enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent_default();
		enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature_default();
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_region_SmartFireSystem_DeviceStatus_off_default() {
		entryAction_main_region_SmartFireSystem_DeviceStatus_off();
		stateVector[0] = State.MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state on */
	private void enterSequence_main_region_SmartFireSystem_DeviceStatus_on_default() {
		entryAction_main_region_SmartFireSystem_DeviceStatus_on();
		stateVector[0] = State.MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_ON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state <Actuator_Updates> */
	private void enterSequence_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates__default() {
		entryAction_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates_();
		stateVector[1] = State.MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <Device_Functioning> */
	private void enterSequence_main_region_SmartFireSystem_ActuatorComponent__Device_Functioning__default() {
		entryAction_main_region_SmartFireSystem_ActuatorComponent__Device_Functioning_();
		stateVector[1] = State.MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_region_SmartFireSystem_ActuatorComponent_off_default() {
		entryAction_main_region_SmartFireSystem_ActuatorComponent_off();
		stateVector[1] = State.MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT_OFF;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <Initialize_Controller_Component> */
	private void enterSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__default() {
		enterSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating_default();
	}
	
	/* 'default' enter sequence for state <Controller_Updates> */
	private void enterSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates__default() {
		entryAction_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_();
		stateVector[2] = State.MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_region_SmartFireSystem_ControllerComponent_off_default() {
		entryAction_main_region_SmartFireSystem_ControllerComponent_off();
		stateVector[2] = State.MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state <Initialize_Sensor_Component> */
	private void enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__default() {
		enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating_default();
	}
	
	/* 'default' enter sequence for state <Sensor_Updates> */
	private void enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__default() {
		entryAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
		enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_default();
	}
	
	/* 'default' enter sequence for state CarbonDetected */
	private void enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_CarbonDetected_default() {
		entryAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_CarbonDetected();
		stateVector[3] = State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_CARBONDETECTED;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state SmokeDetected */
	private void enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_SmokeDetected_default() {
		entryAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_SmokeDetected();
		stateVector[3] = State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_SMOKEDETECTED;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state HeatDetected */
	private void enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_HeatDetected_default() {
		entryAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_HeatDetected();
		stateVector[3] = State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_HEATDETECTED;
		stateConfVectorPosition = 3;
	}
	
	/* Default enter sequence for final state */
	private void enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__final__default() {
		stateVector[3] = State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1__FINAL_;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_region_SmartFireSystem_SensorComponent_off_default() {
		entryAction_main_region_SmartFireSystem_SensorComponent_off();
		stateVector[3] = State.MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT_OFF;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state <Initialize_WiFi_Component> */
	private void enterSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__default() {
		enterSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating_default();
	}
	
	/* 'default' enter sequence for state <WiFi_Updates> */
	private void enterSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates__default() {
		entryAction_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_();
		stateVector[4] = State.MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_region_SmartFireSystem_NetworkComponent_off_default() {
		entryAction_main_region_SmartFireSystem_NetworkComponent_off();
		stateVector[4] = State.MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF;
		stateConfVectorPosition = 4;
	}
	
	/* 'default' enter sequence for state <Initialize_Power_Component> */
	private void enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__default() {
		enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating_default();
	}
	
	/* 'default' enter sequence for state <Power_Updates> */
	private void enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates__default() {
		entryAction_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_();
		stateVector[5] = State.MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent_off_default() {
		entryAction_main_region_SmartFireSystem_PowerCalculatorComponent_off();
		stateVector[5] = State.MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF;
		stateConfVectorPosition = 5;
	}
	
	/* 'default' enter sequence for state <Initialize_DeviceTemp_Component> */
	private void enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__default() {
		enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating_default();
	}
	
	/* 'default' enter sequence for state <Temperature_Updates> */
	private void enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates__default() {
		entryAction_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_();
		stateVector[6] = State.MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_;
		stateConfVectorPosition = 6;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature_off_default() {
		entryAction_main_region_SmartFireSystem_trackingDeviceTemperature_off();
		stateVector[6] = State.MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE_OFF;
		stateConfVectorPosition = 6;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region DeviceStatus */
	private void enterSequence_main_region_SmartFireSystem_DeviceStatus_default() {
		react_main_region_SmartFireSystem_DeviceStatus__entry_Default();
	}
	
	/* 'default' enter sequence for region ActuatorComponent */
	private void enterSequence_main_region_SmartFireSystem_ActuatorComponent_default() {
		react_main_region_SmartFireSystem_ActuatorComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region ControllerComponent */
	private void enterSequence_main_region_SmartFireSystem_ControllerComponent_default() {
		react_main_region_SmartFireSystem_ControllerComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region updating */
	private void enterSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating_default() {
		react_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__entry_Default();
	}
	
	/* 'default' enter sequence for region SensorComponent */
	private void enterSequence_main_region_SmartFireSystem_SensorComponent_default() {
		react_main_region_SmartFireSystem_SensorComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region updating */
	private void enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating_default() {
		react_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_default() {
		react_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__entry_Default();
	}
	
	/* 'default' enter sequence for region NetworkComponent */
	private void enterSequence_main_region_SmartFireSystem_NetworkComponent_default() {
		react_main_region_SmartFireSystem_NetworkComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region updating */
	private void enterSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating_default() {
		react_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__entry_Default();
	}
	
	/* 'default' enter sequence for region PowerCalculatorComponent */
	private void enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent_default() {
		react_main_region_SmartFireSystem_PowerCalculatorComponent__entry_Default();
	}
	
	/* 'default' enter sequence for region updating */
	private void enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating_default() {
		react_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__entry_Default();
	}
	
	/* 'default' enter sequence for region trackingDeviceTemperature */
	private void enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature_default() {
		react_main_region_SmartFireSystem_trackingDeviceTemperature__entry_Default();
	}
	
	/* 'default' enter sequence for region updating */
	private void enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating_default() {
		react_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__entry_Default();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_region_SmartFireSystem_DeviceStatus_off() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state on */
	private void exitSequence_main_region_SmartFireSystem_DeviceStatus_on() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_region_SmartFireSystem_DeviceStatus_on();
	}
	
	/* Default exit sequence for state <Actuator_Updates> */
	private void exitSequence_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates_() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates_();
	}
	
	/* Default exit sequence for state <Device_Functioning> */
	private void exitSequence_main_region_SmartFireSystem_ActuatorComponent__Device_Functioning_() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region_SmartFireSystem_ActuatorComponent__Device_Functioning_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_region_SmartFireSystem_ActuatorComponent_off() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region_SmartFireSystem_ActuatorComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_Controller_Component> */
	private void exitSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component_() {
		exitSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating();
	}
	
	/* Default exit sequence for state <Controller_Updates> */
	private void exitSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		
		exitAction_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_region_SmartFireSystem_ControllerComponent_off() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		
		exitAction_main_region_SmartFireSystem_ControllerComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_Sensor_Component> */
	private void exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component_() {
		exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating();
	}
	
	/* Default exit sequence for state <Sensor_Updates> */
	private void exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_() {
		exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1();
		exitAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
	}
	
	/* Default exit sequence for state CarbonDetected */
	private void exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_CarbonDetected() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state SmokeDetected */
	private void exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_SmokeDetected() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state HeatDetected */
	private void exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_HeatDetected() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__final_() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_region_SmartFireSystem_SensorComponent_off() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_main_region_SmartFireSystem_SensorComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_WiFi_Component> */
	private void exitSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component_() {
		exitSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating();
	}
	
	/* Default exit sequence for state <WiFi_Updates> */
	private void exitSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
		
		exitAction_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_region_SmartFireSystem_NetworkComponent_off() {
		stateVector[4] = State.$NULLSTATE$;
		stateConfVectorPosition = 4;
		
		exitAction_main_region_SmartFireSystem_NetworkComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_Power_Component> */
	private void exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component_() {
		exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating();
	}
	
	/* Default exit sequence for state <Power_Updates> */
	private void exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_() {
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
		
		exitAction_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent_off() {
		stateVector[5] = State.$NULLSTATE$;
		stateConfVectorPosition = 5;
		
		exitAction_main_region_SmartFireSystem_PowerCalculatorComponent_off();
	}
	
	/* Default exit sequence for state <Initialize_DeviceTemp_Component> */
	private void exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component_() {
		exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating();
	}
	
	/* Default exit sequence for state <Temperature_Updates> */
	private void exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_() {
		stateVector[6] = State.$NULLSTATE$;
		stateConfVectorPosition = 6;
		
		exitAction_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature_off() {
		stateVector[6] = State.$NULLSTATE$;
		stateConfVectorPosition = 6;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_OFF:
			exitSequence_main_region_SmartFireSystem_DeviceStatus_off();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_DEVICESTATUS_ON:
			exitSequence_main_region_SmartFireSystem_DeviceStatus_on();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__ACTUATOR_UPDATES_:
			exitSequence_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT__DEVICE_FUNCTIONING_:
			exitSequence_main_region_SmartFireSystem_ActuatorComponent__Device_Functioning_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_ACTUATORCOMPONENT_OFF:
			exitSequence_main_region_SmartFireSystem_ActuatorComponent_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_:
			exitSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT_OFF:
			exitSequence_main_region_SmartFireSystem_ControllerComponent_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_CARBONDETECTED:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_CarbonDetected();
			exitAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_SMOKEDETECTED:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_SmokeDetected();
			exitAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_HEATDETECTED:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_HeatDetected();
			exitAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1__FINAL_:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__final_();
			exitAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT_OFF:
			exitSequence_main_region_SmartFireSystem_SensorComponent_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[4]) {
		case MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_:
			exitSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT_OFF:
			exitSequence_main_region_SmartFireSystem_NetworkComponent_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[5]) {
		case MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_:
			exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT_OFF:
			exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[6]) {
		case MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_:
			exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE_OFF:
			exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature_off();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region updating */
	private void exitSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating() {
		switch (stateVector[2]) {
		case MAIN_REGION_SMARTFIRESYSTEM_CONTROLLERCOMPONENT__INITIALIZE_CONTROLLER_COMPONENT__UPDATING__CONTROLLER_UPDATES_:
			exitSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region updating */
	private void exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating() {
		switch (stateVector[3]) {
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_CARBONDETECTED:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_CarbonDetected();
			exitAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_SMOKEDETECTED:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_SmokeDetected();
			exitAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_HEATDETECTED:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_HeatDetected();
			exitAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1__FINAL_:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__final_();
			exitAction_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1() {
		switch (stateVector[3]) {
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_CARBONDETECTED:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_CarbonDetected();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_SMOKEDETECTED:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_SmokeDetected();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1_HEATDETECTED:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_HeatDetected();
			break;
		case MAIN_REGION_SMARTFIRESYSTEM_SENSORCOMPONENT__INITIALIZE_SENSOR_COMPONENT__UPDATING__SENSOR_UPDATES__R1__FINAL_:
			exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region updating */
	private void exitSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating() {
		switch (stateVector[4]) {
		case MAIN_REGION_SMARTFIRESYSTEM_NETWORKCOMPONENT__INITIALIZE_WIFI_COMPONENT__UPDATING__WIFI_UPDATES_:
			exitSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region updating */
	private void exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating() {
		switch (stateVector[5]) {
		case MAIN_REGION_SMARTFIRESYSTEM_POWERCALCULATORCOMPONENT__INITIALIZE_POWER_COMPONENT__UPDATING__POWER_UPDATES_:
			exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region updating */
	private void exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating() {
		switch (stateVector[6]) {
		case MAIN_REGION_SMARTFIRESYSTEM_TRACKINGDEVICETEMPERATURE__INITIALIZE_DEVICETEMP_COMPONENT__UPDATING__TEMPERATURE_UPDATES_:
			exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__choice_0() {
		if (carbonSensorOutput.getActivity()) {
			enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_CarbonDetected_default();
		} else {
			if (smokeSensorOutput.getActivity()) {
				enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_SmokeDetected_default();
			} else {
				if (heatSensorOutput.getActivity()) {
					enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_HeatDetected_default();
				} else {
					enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__final__default();
				}
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_DeviceStatus__entry_Default() {
		getFireAlarm().enter();
		
		enterSequence_main_region_SmartFireSystem_DeviceStatus_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_ActuatorComponent__entry_Default() {
		getActuator().enter();
		
		enterSequence_main_region_SmartFireSystem_ActuatorComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_ControllerComponent__entry_Default() {
		getController().enter();
		
		enterSequence_main_region_SmartFireSystem_ControllerComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__entry_Default() {
		enterSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_SensorComponent__entry_Default() {
		getCarbonSensor().enter();
		
		getSmokeSensor().enter();
		
		getHeatSensor().enter();
		
		enterSequence_main_region_SmartFireSystem_SensorComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__entry_Default() {
		enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__entry_Default() {
		react_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_NetworkComponent__entry_Default() {
		getWiFi().enter();
		
		enterSequence_main_region_SmartFireSystem_NetworkComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__entry_Default() {
		enterSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_PowerCalculatorComponent__entry_Default() {
		getPower().enter();
		
		enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__entry_Default() {
		enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_trackingDeviceTemperature__entry_Default() {
		getTemp().enter();
		
		enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature_off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__entry_Default() {
		enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_SmartFireSystem_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_SmartFireSystem_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = react(transitioned_before);
		
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_DeviceStatus_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (system.on) {
				exitSequence_main_region_SmartFireSystem_DeviceStatus_off();
				enterSequence_main_region_SmartFireSystem_DeviceStatus_on_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_DeviceStatus_on_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (system.off) {
				exitSequence_main_region_SmartFireSystem_DeviceStatus_on();
				enterSequence_main_region_SmartFireSystem_DeviceStatus_off_default();
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_SmartFireSystem_DeviceStatus_on();
					timeEvents[0] = false;
					enterSequence_main_region_SmartFireSystem_DeviceStatus_on_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (getActuator().getIsTriggered()) {
				exitSequence_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates_();
				enterSequence_main_region_SmartFireSystem_ActuatorComponent__Device_Functioning__default();
				transitioned_after = 1l;
			} else {
				if (system.off) {
					exitSequence_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates_();
					enterSequence_main_region_SmartFireSystem_ActuatorComponent_off_default();
					transitioned_after = 1l;
				} else {
					if (timeEvents[1]) {
						exitSequence_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates_();
						timeEvents[1] = false;
						enterSequence_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates__default();
						transitioned_after = 1l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_ActuatorComponent__Device_Functioning__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (!getActuator().getIsTriggered()) {
				exitSequence_main_region_SmartFireSystem_ActuatorComponent__Device_Functioning_();
				enterSequence_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates__default();
				transitioned_after = 1l;
			} else {
				if (system.off) {
					exitSequence_main_region_SmartFireSystem_ActuatorComponent__Device_Functioning_();
					enterSequence_main_region_SmartFireSystem_ActuatorComponent_off_default();
					transitioned_after = 1l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			if (timeEvents[2]) {
				fireAlarm.sensors().setTriggerSignal_received(actuator.getIsTriggered());
				
				fireAlarm.sensors().setSmoke_presence(smokeSensorOutput.activity);
				
				fireAlarm.sensors().setCarbon_presence(carbonSensorOutput.activity);
				
				fireAlarm.sensors().setHeat_presence(heatSensorOutput.activity);
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_ActuatorComponent_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1l) {
			if (system.on) {
				exitSequence_main_region_SmartFireSystem_ActuatorComponent_off();
				enterSequence_main_region_SmartFireSystem_ActuatorComponent__Actuator_Updates__default();
				transitioned_after = 1l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (system.off) {
				exitSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component_();
				enterSequence_main_region_SmartFireSystem_ControllerComponent_off_default();
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (timeEvents[3]) {
				exitSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates_();
				timeEvents[3] = false;
				enterSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__updating__Controller_Updates__default();
				main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__react(2l);
				
				transitioned_after = 2l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_ControllerComponent_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2l) {
			if (system.on) {
				exitSequence_main_region_SmartFireSystem_ControllerComponent_off();
				enterSequence_main_region_SmartFireSystem_ControllerComponent__Initialize_Controller_Component__default();
				transitioned_after = 2l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (system.off) {
				exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component_();
				enterSequence_main_region_SmartFireSystem_SensorComponent_off_default();
				transitioned_after = 3l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (((timeEvents[4]) && (!sensorOutput.getActivity()))) {
				exitSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates_();
				timeEvents[4] = false;
				enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__default();
				main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__react(3l);
				
				transitioned_after = 3l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_CarbonDetected_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__react(transitioned_before);
		
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_SmokeDetected_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__react(transitioned_before);
		
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1_HeatDetected_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__react(transitioned_before);
		
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__r1__final__react(long transitioned_before) {
		return main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__updating__Sensor_Updates__react(transitioned_before);
	}
	
	private long main_region_SmartFireSystem_SensorComponent_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3l) {
			if (system.on) {
				exitSequence_main_region_SmartFireSystem_SensorComponent_off();
				enterSequence_main_region_SmartFireSystem_SensorComponent__Initialize_Sensor_Component__default();
				transitioned_after = 3l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (system.off) {
				exitSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component_();
				enterSequence_main_region_SmartFireSystem_NetworkComponent_off_default();
				transitioned_after = 4l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (timeEvents[5]) {
				exitSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates_();
				timeEvents[5] = false;
				enterSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__updating__WiFi_Updates__default();
				main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__react(4l);
				
				transitioned_after = 4l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_NetworkComponent_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<4l) {
			if (system.on) {
				exitSequence_main_region_SmartFireSystem_NetworkComponent_off();
				enterSequence_main_region_SmartFireSystem_NetworkComponent__Initialize_WiFi_Component__default();
				transitioned_after = 4l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
			if (system.off) {
				exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component_();
				enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent_off_default();
				transitioned_after = 5l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
			if (timeEvents[6]) {
				exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates_();
				timeEvents[6] = false;
				enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__updating__Power_Updates__default();
				main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__react(5l);
				
				transitioned_after = 5l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_PowerCalculatorComponent_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<5l) {
			if (system.on) {
				exitSequence_main_region_SmartFireSystem_PowerCalculatorComponent_off();
				enterSequence_main_region_SmartFireSystem_PowerCalculatorComponent__Initialize_Power_Component__default();
				transitioned_after = 5l;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<6l) {
			if (system.off) {
				exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component_();
				enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature_off_default();
				main_region_SmartFireSystem_react(0l);
				
				transitioned_after = 6l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartFireSystem_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<6l) {
			if (timeEvents[7]) {
				exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates_();
				timeEvents[7] = false;
				enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__updating__Temperature_Updates__default();
				main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__react(6l);
				
				transitioned_after = 6l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_SmartFireSystem_trackingDeviceTemperature_off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<6l) {
			if (system.on) {
				exitSequence_main_region_SmartFireSystem_trackingDeviceTemperature_off();
				enterSequence_main_region_SmartFireSystem_trackingDeviceTemperature__Initialize_DeviceTemp_Component__default();
				main_region_SmartFireSystem_react(0l);
				
				transitioned_after = 6l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_SmartFireSystem_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public synchronized void triggerWithoutEvent() {
		runCycle();
	}
}
