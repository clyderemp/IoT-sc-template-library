/** Generated by itemis CREATE code generator. */
package smarthub.java;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class Sensor_Component implements ITimed, IEventDriven {
	public enum State {
		_SENSOR_UPDATES___SENSOR_MONITORING_,
		_SENSOR_UPDATES___SENSOR_MONITORING__SENSING__NO_ACTIVITY_SENSED_,
		_SENSOR_UPDATES___SENSOR_MONITORING__SENSING__ACTIVITY_SENSED_,
		_SENSOR_UPDATES___OFF_,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(Sensor_Component.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(Sensor_Component.this) {
			this.isExecuting = value;
		}
	}
	public Sensor_Component() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setCounter(0l);
		
		setSimulate_detection_timer(0l);
		
		setActivity(false);
		
		setReading(false);
		
		setActivity_sensed("");
		
		setSignalSentToController(false);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence__Sensor_Updates__default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence__Sensor_Updates_();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		on = false;
		off = false;
		detect = false;
		stillActive = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case _SENSOR_UPDATES___SENSOR_MONITORING__SENSING__NO_ACTIVITY_SENSED_:
			_Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed__react(-1l);
			break;
		case _SENSOR_UPDATES___SENSOR_MONITORING__SENSING__ACTIVITY_SENSED_:
			_Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed__react(-1l);
			break;
		case _SENSOR_UPDATES___OFF_:
			_Sensor_Updates___off__react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
		} while (nextEvent());
		
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case _SENSOR_UPDATES___SENSOR_MONITORING_:
			return stateVector[0].ordinal() >= State.
					_SENSOR_UPDATES___SENSOR_MONITORING_.ordinal()&& stateVector[0].ordinal() <= State._SENSOR_UPDATES___SENSOR_MONITORING__SENSING__ACTIVITY_SENSED_.ordinal();
		case _SENSOR_UPDATES___SENSOR_MONITORING__SENSING__NO_ACTIVITY_SENSED_:
			return stateVector[0] == State._SENSOR_UPDATES___SENSOR_MONITORING__SENSING__NO_ACTIVITY_SENSED_;
		case _SENSOR_UPDATES___SENSOR_MONITORING__SENSING__ACTIVITY_SENSED_:
			return stateVector[0] == State._SENSOR_UPDATES___SENSOR_MONITORING__SENSING__ACTIVITY_SENSED_;
		case _SENSOR_UPDATES___OFF_:
			return stateVector[0] == State._SENSOR_UPDATES___OFF_;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean on;
	
	
	public void raiseOn() {
		synchronized(Sensor_Component.this) {
			inEventQueue.add(() -> {
				on = true;
			});
			runCycle();
		}
	}
	
	private boolean off;
	
	
	public void raiseOff() {
		synchronized(Sensor_Component.this) {
			inEventQueue.add(() -> {
				off = true;
			});
			runCycle();
		}
	}
	
	private boolean detect;
	
	
	public void raiseDetect() {
		synchronized(Sensor_Component.this) {
			inEventQueue.add(() -> {
				detect = true;
			});
			runCycle();
		}
	}
	
	private boolean stillActive;
	
	
	public void raiseStillActive() {
		synchronized(Sensor_Component.this) {
			inEventQueue.add(() -> {
				stillActive = true;
			});
			runCycle();
		}
	}
	
	private long counter;
	
	public synchronized long getCounter() {
		synchronized(Sensor_Component.this) {
			return counter;
		}
	}
	
	public void setCounter(long value) {
		synchronized(Sensor_Component.this) {
			this.counter = value;
		}
	}
	
	private long simulate_detection_timer;
	
	public synchronized long getSimulate_detection_timer() {
		synchronized(Sensor_Component.this) {
			return simulate_detection_timer;
		}
	}
	
	public void setSimulate_detection_timer(long value) {
		synchronized(Sensor_Component.this) {
			this.simulate_detection_timer = value;
		}
	}
	
	private boolean activity;
	
	public synchronized boolean getActivity() {
		synchronized(Sensor_Component.this) {
			return activity;
		}
	}
	
	public void setActivity(boolean value) {
		synchronized(Sensor_Component.this) {
			this.activity = value;
		}
	}
	
	private boolean reading;
	
	public synchronized boolean getReading() {
		synchronized(Sensor_Component.this) {
			return reading;
		}
	}
	
	public void setReading(boolean value) {
		synchronized(Sensor_Component.this) {
			this.reading = value;
		}
	}
	
	private String activity_sensed;
	
	public synchronized String getActivity_sensed() {
		synchronized(Sensor_Component.this) {
			return activity_sensed;
		}
	}
	
	public void setActivity_sensed(String value) {
		synchronized(Sensor_Component.this) {
			this.activity_sensed = value;
		}
	}
	
	private boolean signalSentToController;
	
	public synchronized boolean getSignalSentToController() {
		synchronized(Sensor_Component.this) {
			return signalSentToController;
		}
	}
	
	public void setSignalSentToController(boolean value) {
		synchronized(Sensor_Component.this) {
			this.signalSentToController = value;
		}
	}
	
	/* Entry action for state '<Sensor_Monitoring>'. */
	private void entryAction__Sensor_Updates___Sensor_Monitoring_() {
		setReading(true);
	}
	
	/* Entry action for state '<No_Activity_Sensed>'. */
	private void entryAction__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed_() {
		timerService.setTimer(this, 0, (1l * 1000l), true);
		
		timerService.setTimer(this, 1, (1l * 1000l), true);
		
		setCounter(simulate_detection_timer);
		
		setActivity(false);
	}
	
	/* Entry action for state '<Activity_Sensed>'. */
	private void entryAction__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed_() {
		timerService.setTimer(this, 2, (1l * 1000l), true);
		
		setActivity(true);
		
		setSignalSentToController(true);
		
		setCounter(0l);
	}
	
	/* Entry action for state '<off>'. */
	private void entryAction__Sensor_Updates___off_() {
		setReading(false);
	}
	
	/* Exit action for state '<No_Activity_Sensed>'. */
	private void exitAction__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed_() {
		timerService.unsetTimer(this, 0);
		
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state '<Activity_Sensed>'. */
	private void exitAction__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed_() {
		timerService.unsetTimer(this, 2);
		
		setActivity(false);
		
		setSignalSentToController(false);
	}
	
	/* 'default' enter sequence for state <Sensor_Monitoring> */
	private void enterSequence__Sensor_Updates___Sensor_Monitoring__default() {
		entryAction__Sensor_Updates___Sensor_Monitoring_();
		enterSequence__Sensor_Updates___Sensor_Monitoring__Sensing_default();
	}
	
	/* 'default' enter sequence for state <No_Activity_Sensed> */
	private void enterSequence__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed__default() {
		entryAction__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed_();
		stateVector[0] = State._SENSOR_UPDATES___SENSOR_MONITORING__SENSING__NO_ACTIVITY_SENSED_;
	}
	
	/* 'default' enter sequence for state <Activity_Sensed> */
	private void enterSequence__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed__default() {
		entryAction__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed_();
		stateVector[0] = State._SENSOR_UPDATES___SENSOR_MONITORING__SENSING__ACTIVITY_SENSED_;
	}
	
	/* 'default' enter sequence for state <off> */
	private void enterSequence__Sensor_Updates___off__default() {
		entryAction__Sensor_Updates___off_();
		stateVector[0] = State._SENSOR_UPDATES___OFF_;
	}
	
	/* 'default' enter sequence for region <Sensor_Updates> */
	private void enterSequence__Sensor_Updates__default() {
		react__Sensor_Updates___entry_Default();
	}
	
	/* 'default' enter sequence for region Sensing */
	private void enterSequence__Sensor_Updates___Sensor_Monitoring__Sensing_default() {
		react__Sensor_Updates___Sensor_Monitoring__Sensing__entry_Default();
	}
	
	/* Default exit sequence for state <Sensor_Monitoring> */
	private void exitSequence__Sensor_Updates___Sensor_Monitoring_() {
		exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing();
	}
	
	/* Default exit sequence for state <No_Activity_Sensed> */
	private void exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed_() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed_();
	}
	
	/* Default exit sequence for state <Activity_Sensed> */
	private void exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed_() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed_();
	}
	
	/* Default exit sequence for state <off> */
	private void exitSequence__Sensor_Updates___off_() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region <Sensor_Updates> */
	private void exitSequence__Sensor_Updates_() {
		switch (stateVector[0]) {
		case _SENSOR_UPDATES___SENSOR_MONITORING__SENSING__NO_ACTIVITY_SENSED_:
			exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed_();
			break;
		case _SENSOR_UPDATES___SENSOR_MONITORING__SENSING__ACTIVITY_SENSED_:
			exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed_();
			break;
		case _SENSOR_UPDATES___OFF_:
			exitSequence__Sensor_Updates___off_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Sensing */
	private void exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing() {
		switch (stateVector[0]) {
		case _SENSOR_UPDATES___SENSOR_MONITORING__SENSING__NO_ACTIVITY_SENSED_:
			exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed_();
			break;
		case _SENSOR_UPDATES___SENSOR_MONITORING__SENSING__ACTIVITY_SENSED_:
			exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed_();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__Sensor_Updates___entry_Default() {
		enterSequence__Sensor_Updates___Sensor_Monitoring__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__Sensor_Updates___Sensor_Monitoring__Sensing__entry_Default() {
		enterSequence__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed__default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long _Sensor_Updates___Sensor_Monitoring__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (off) {
				exitSequence__Sensor_Updates___Sensor_Monitoring_();
				enterSequence__Sensor_Updates___off__default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (((timeEvents[0]) && (getCounter()<=0l))) {
				exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed_();
				timeEvents[0] = false;
				enterSequence__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed__default();
				_Sensor_Updates___Sensor_Monitoring__react(0l);
				
				transitioned_after = 0l;
			} else {
				if (detect) {
					exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed_();
					enterSequence__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed__default();
					_Sensor_Updates___Sensor_Monitoring__react(0l);
					
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			if (timeEvents[1]) {
				counter--;
			}
			transitioned_after = _Sensor_Updates___Sensor_Monitoring__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (((timeEvents[2]) && (!getActivity()))) {
				exitSequence__Sensor_Updates___Sensor_Monitoring__Sensing__Activity_Sensed_();
				timeEvents[2] = false;
				enterSequence__Sensor_Updates___Sensor_Monitoring__Sensing__No_Activity_Sensed__default();
				_Sensor_Updates___Sensor_Monitoring__react(0l);
				
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = _Sensor_Updates___Sensor_Monitoring__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _Sensor_Updates___off__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (on) {
				exitSequence__Sensor_Updates___off_();
				enterSequence__Sensor_Updates___Sensor_Monitoring__default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public synchronized void triggerWithoutEvent() {
		runCycle();
	}
}
