/** Generated by itemis CREATE code generator. */
package smarthub.java;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class Network_Component implements ITimed, IEventDriven {
	public enum State {
		MAIN_REGION_WIFI_COMPONENT,
		MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION,
		MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER,
		MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_SUCCESS,
		MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE,
		MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_NETWORKTIMEOUT,
		MAIN_REGION__OFF_,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(Network_Component.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(Network_Component.this) {
			this.isExecuting = value;
		}
	}
	public Network_Component() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setConnectionLevel(0l);
		
		setTimeout_value(0l);
		
		setConnection(false);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		on = false;
		off = false;
		force_timeout = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_SUCCESS:
			main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success_react(-1l);
			break;
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE:
			main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure_react(-1l);
			break;
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_NETWORKTIMEOUT:
			main_region_WiFi_Component_ConnectionStatus_networkTimeout_react(-1l);
			break;
		case MAIN_REGION__OFF_:
			main_region__off__react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
		} while (nextEvent());
		
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_WIFI_COMPONENT:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_WIFI_COMPONENT.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_NETWORKTIMEOUT.ordinal();
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE.ordinal();
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE.ordinal();
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_SUCCESS:
			return stateVector[0] == State.MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_SUCCESS;
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE:
			return stateVector[0] == State.MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE;
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_NETWORKTIMEOUT:
			return stateVector[0] == State.MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_NETWORKTIMEOUT;
		case MAIN_REGION__OFF_:
			return stateVector[0] == State.MAIN_REGION__OFF_;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean on;
	
	
	public void raiseOn() {
		synchronized(Network_Component.this) {
			inEventQueue.add(() -> {
				on = true;
			});
			runCycle();
		}
	}
	
	private boolean off;
	
	
	public void raiseOff() {
		synchronized(Network_Component.this) {
			inEventQueue.add(() -> {
				off = true;
			});
			runCycle();
		}
	}
	
	private boolean force_timeout;
	
	
	public void raiseForce_timeout() {
		synchronized(Network_Component.this) {
			inEventQueue.add(() -> {
				force_timeout = true;
			});
			runCycle();
		}
	}
	
	private boolean error;
	
	
	protected void raiseError() {
		synchronized(Network_Component.this) {
			error = true;
			errorObservable.next(null);
		}
	}
	
	private Observable<Void> errorObservable = new Observable<Void>();
	
	public Observable<Void> getError() {
		return errorObservable;
	}
	
	private long connectionLevel;
	
	public synchronized long getConnectionLevel() {
		synchronized(Network_Component.this) {
			return connectionLevel;
		}
	}
	
	public void setConnectionLevel(long value) {
		synchronized(Network_Component.this) {
			this.connectionLevel = value;
		}
	}
	
	private long timeout_value;
	
	public synchronized long getTimeout_value() {
		synchronized(Network_Component.this) {
			return timeout_value;
		}
	}
	
	public void setTimeout_value(long value) {
		synchronized(Network_Component.this) {
			this.timeout_value = value;
		}
	}
	
	private boolean connection;
	
	public synchronized boolean getConnection() {
		synchronized(Network_Component.this) {
			return connection;
		}
	}
	
	public void setConnection(boolean value) {
		synchronized(Network_Component.this) {
			this.connection = value;
		}
	}
	
	/* Entry action for state 'WiFi_Component'. */
	private void entryAction_main_region_WiFi_Component() {
		setConnection(true);
		
		setConnectionLevel(timeout_value);
	}
	
	/* Entry action for state 'connectingToServer'. */
	private void entryAction_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer() {
		setConnection(true);
	}
	
	/* Entry action for state 'success'. */
	private void entryAction_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success() {
		timerService.setTimer(this, 0, (1l * 1000l), true);
	}
	
	/* Entry action for state 'failure'. */
	private void entryAction_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure() {
		timerService.setTimer(this, 1, (5l * 1000l), false);
		
		timerService.setTimer(this, 2, (1l * 1000l), true);
	}
	
	/* Entry action for state 'networkTimeout'. */
	private void entryAction_main_region_WiFi_Component_ConnectionStatus_networkTimeout() {
		timerService.setTimer(this, 3, (1l * 1000l), false);
		
		setConnection(false);
		
		setConnectionLevel(timeout_value);
	}
	
	/* Entry action for state '<off>'. */
	private void entryAction_main_region__off_() {
		setConnection(false);
	}
	
	/* Exit action for state 'success'. */
	private void exitAction_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'failure'. */
	private void exitAction_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure() {
		timerService.unsetTimer(this, 1);
		
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'networkTimeout'. */
	private void exitAction_main_region_WiFi_Component_ConnectionStatus_networkTimeout() {
		timerService.unsetTimer(this, 3);
	}
	
	/* 'default' enter sequence for state WiFi_Component */
	private void enterSequence_main_region_WiFi_Component_default() {
		entryAction_main_region_WiFi_Component();
		enterSequence_main_region_WiFi_Component_ConnectionStatus_default();
	}
	
	/* 'default' enter sequence for state checkingForWiFiConnection */
	private void enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_default() {
		enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_default();
	}
	
	/* 'default' enter sequence for state connectingToServer */
	private void enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_default() {
		entryAction_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer();
		enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_default();
	}
	
	/* 'default' enter sequence for state success */
	private void enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success_default() {
		entryAction_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success();
		stateVector[0] = State.MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_SUCCESS;
	}
	
	/* 'default' enter sequence for state failure */
	private void enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure_default() {
		entryAction_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure();
		stateVector[0] = State.MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE;
	}
	
	/* 'default' enter sequence for state networkTimeout */
	private void enterSequence_main_region_WiFi_Component_ConnectionStatus_networkTimeout_default() {
		entryAction_main_region_WiFi_Component_ConnectionStatus_networkTimeout();
		stateVector[0] = State.MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_NETWORKTIMEOUT;
	}
	
	/* 'default' enter sequence for state <off> */
	private void enterSequence_main_region__off__default() {
		entryAction_main_region__off_();
		stateVector[0] = State.MAIN_REGION__OFF_;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region ConnectionStatus */
	private void enterSequence_main_region_WiFi_Component_ConnectionStatus_default() {
		react_main_region_WiFi_Component_ConnectionStatus__entry_Default();
	}
	
	/* 'default' enter sequence for region CheckingForConnectionUpdate */
	private void enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_default() {
		react_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_default() {
		react_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1__entry_Default();
	}
	
	/* Default exit sequence for state WiFi_Component */
	private void exitSequence_main_region_WiFi_Component() {
		exitSequence_main_region_WiFi_Component_ConnectionStatus();
	}
	
	/* Default exit sequence for state checkingForWiFiConnection */
	private void exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection() {
		exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate();
	}
	
	/* Default exit sequence for state connectingToServer */
	private void exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer() {
		exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1();
	}
	
	/* Default exit sequence for state success */
	private void exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success();
	}
	
	/* Default exit sequence for state failure */
	private void exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure();
	}
	
	/* Default exit sequence for state networkTimeout */
	private void exitSequence_main_region_WiFi_Component_ConnectionStatus_networkTimeout() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_WiFi_Component_ConnectionStatus_networkTimeout();
	}
	
	/* Default exit sequence for state <off> */
	private void exitSequence_main_region__off_() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_SUCCESS:
			exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success();
			break;
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE:
			exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure();
			break;
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_NETWORKTIMEOUT:
			exitSequence_main_region_WiFi_Component_ConnectionStatus_networkTimeout();
			break;
		case MAIN_REGION__OFF_:
			exitSequence_main_region__off_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region ConnectionStatus */
	private void exitSequence_main_region_WiFi_Component_ConnectionStatus() {
		switch (stateVector[0]) {
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_SUCCESS:
			exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success();
			break;
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE:
			exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure();
			break;
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_NETWORKTIMEOUT:
			exitSequence_main_region_WiFi_Component_ConnectionStatus_networkTimeout();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region CheckingForConnectionUpdate */
	private void exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate() {
		switch (stateVector[0]) {
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_SUCCESS:
			exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success();
			break;
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE:
			exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1() {
		switch (stateVector[0]) {
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_SUCCESS:
			exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success();
			break;
		case MAIN_REGION_WIFI_COMPONENT_CONNECTIONSTATUS_CHECKINGFORWIFICONNECTION_CHECKINGFORCONNECTIONUPDATE_CONNECTINGTOSERVER_R1_FAILURE:
			exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1__choice_0() {
		if (getConnection()) {
			enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success_default();
		} else {
			enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_WiFi_Component_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate__entry_Default() {
		enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1__entry_Default() {
		react_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_WiFi_Component_ConnectionStatus__entry_Default() {
		enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_WiFi_Component_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (off) {
				exitSequence_main_region_WiFi_Component();
				enterSequence_main_region__off__default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = main_region_WiFi_Component_react(transitioned_before);
		
		return transitioned_after;
	}
	
	private long main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (getConnectionLevel()<=0l) {
				exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection();
				enterSequence_main_region_WiFi_Component_ConnectionStatus_networkTimeout_default();
				main_region_WiFi_Component_react(0l);
				
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_success_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (timeEvents[0]) {
			connectionLevel--;
		}
		transitioned_after = main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_react(transitioned_before);
		
		return transitioned_after;
	}
	
	private long main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_r1_failure_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (timeEvents[1]) {
				exitSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer();
				setConnection(true);
				
				timeEvents[1] = false;
				enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_default();
				main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_react(0l);
				
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			if (timeEvents[2]) {
				connectionLevel--;
			}
			transitioned_after = main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_WiFi_Component_ConnectionStatus_networkTimeout_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (((timeEvents[3]) && (!getConnection()))) {
				exitSequence_main_region_WiFi_Component_ConnectionStatus_networkTimeout();
				timeEvents[3] = false;
				enterSequence_main_region_WiFi_Component_ConnectionStatus_checkingForWiFiConnection_CheckingForConnectionUpdate_connectingToServer_default();
				main_region_WiFi_Component_react(0l);
				
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_WiFi_Component_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region__off__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (on) {
				exitSequence_main_region__off_();
				enterSequence_main_region_WiFi_Component_default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public synchronized void triggerWithoutEvent() {
		runCycle();
	}
}
