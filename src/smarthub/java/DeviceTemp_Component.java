/** Generated by itemis CREATE code generator. */
package smarthub.java;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DeviceTemp_Component implements IStatemachine, ITimed, IEventDriven {
	public static class Device {
		private DeviceTemp_Component parent;
		
		public Device(DeviceTemp_Component parent) {
			this.parent = parent;
		}
		private boolean isOn;
		
		public synchronized boolean getIsOn() {
			synchronized(parent) {
				return isOn;
			}
		}
		
		public void setIsOn(boolean value) {
			synchronized(parent) {
				this.isOn = value;
			}
		}
		
		private boolean cooling_down;
		
		public synchronized boolean getCooling_down() {
			synchronized(parent) {
				return cooling_down;
			}
		}
		
		public void setCooling_down(boolean value) {
			synchronized(parent) {
				this.cooling_down = value;
			}
		}
		
		private boolean heating_up;
		
		public synchronized boolean getHeating_up() {
			synchronized(parent) {
				return heating_up;
			}
		}
		
		public void setHeating_up(boolean value) {
			synchronized(parent) {
				this.heating_up = value;
			}
		}
		
	}
	
	public static class Heat {
		private DeviceTemp_Component parent;
		
		public Heat(DeviceTemp_Component parent) {
			this.parent = parent;
		}
		private boolean continueEvent;
		
		
		public void raiseContinue() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					continueEvent = true;
				});
				parent.runCycle();
			}
		}
		
		private long level;
		
		public synchronized long getLevel() {
			synchronized(parent) {
				return level;
			}
		}
		
		public void setLevel(long value) {
			synchronized(parent) {
				this.level = value;
			}
		}
		
		private long increment;
		
		public synchronized long getIncrement() {
			synchronized(parent) {
				return increment;
			}
		}
		
		public void setIncrement(long value) {
			synchronized(parent) {
				this.increment = value;
			}
		}
		
		private long decrement;
		
		public synchronized long getDecrement() {
			synchronized(parent) {
				return decrement;
			}
		}
		
		public void setDecrement(long value) {
			synchronized(parent) {
				this.decrement = value;
			}
		}
		
		private long max;
		
		public synchronized long getMax() {
			synchronized(parent) {
				return max;
			}
		}
		
		public void setMax(long value) {
			synchronized(parent) {
				this.max = value;
			}
		}
		
		private boolean user_warned;
		
		public synchronized boolean getUser_warned() {
			synchronized(parent) {
				return user_warned;
			}
		}
		
		public void setUser_warned(boolean value) {
			synchronized(parent) {
				this.user_warned = value;
			}
		}
		
	}
	
	protected Device device;
	
	protected Heat heat;
	
	public enum State {
		_DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT_,
		_DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__RESTSTATE,
		_DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__HEATINGUP,
		_DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__OVERHEAT,
		_DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE,
		_DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__COOLING,
		_DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(DeviceTemp_Component.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(DeviceTemp_Component.this) {
			this.isExecuting = value;
		}
	}
	public DeviceTemp_Component() {
		device = new Device(this);
		heat = new Heat(this);
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart DeviceTemp_Component */
		setMessage("");
		setFully_rested(false);
		device.setIsOn(false);
		device.setCooling_down(false);
		device.setHeating_up(false);
		heat.setLevel(0l);
		heat.setIncrement(1l);
		heat.setDecrement(2l);
		heat.setMax(20l);
		heat.setUser_warned(false);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		/* Default enter sequence for statechart DeviceTemp_Component */
		enterSequence__DeviceTemp_Component__default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		/* Default exit sequence for statechart DeviceTemp_Component */
		exitSequence__DeviceTemp_Component_();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		heat.continueEvent = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__RESTSTATE:
			_DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState_react(-1l);
			break;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__HEATINGUP:
			_DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp_react(-1l);
			break;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__OVERHEAT:
			_DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat_react(-1l);
			break;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__COOLING:
			_DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling_react(-1l);
			break;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED:
			_DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__fully_rested_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
		} while (nextEvent());
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT_:
			return stateVector[0].ordinal() >= State.
					_DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT_.ordinal()&& stateVector[0].ordinal() <= State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED.ordinal();
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__RESTSTATE:
			return stateVector[0] == State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__RESTSTATE;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__HEATINGUP:
			return stateVector[0] == State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__HEATINGUP;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__OVERHEAT:
			return stateVector[0] == State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__OVERHEAT;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE:
			return stateVector[0].ordinal() >= State.
					_DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE.ordinal()&& stateVector[0].ordinal() <= State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED.ordinal();
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__COOLING:
			return stateVector[0] == State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__COOLING;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED:
			return stateVector[0] == State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Device device() {
		return device;
	}
	
	public Heat heat() {
		return heat;
	}
	
	
	private String message;
	
	public synchronized String getMessage() {
		synchronized(DeviceTemp_Component.this) {
			return message;
		}
	}
	
	public void setMessage(String value) {
		synchronized(DeviceTemp_Component.this) {
			this.message = value;
		}
	}
	
	private boolean fully_rested;
	
	public synchronized boolean getFully_rested() {
		synchronized(DeviceTemp_Component.this) {
			return fully_rested;
		}
	}
	
	public void setFully_rested(boolean value) {
		synchronized(DeviceTemp_Component.this) {
			this.fully_rested = value;
		}
	}
	
	/* Entry action for state 'restState'. */
	private void entryAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState() {
		/* Entry action for state 'restState'. */
		heat.setUser_warned(false);
	}
	
	/* Entry action for state 'heatingUp'. */
	private void entryAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp() {
		/* Entry action for state 'heatingUp'. */
		timerService.setTimer(this, 0, (1l * 1000l), false);
		heat.setLevel(heat.getLevel() + (heat.increment));
		setFully_rested(false);
	}
	
	/* Entry action for state 'overheat'. */
	private void entryAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat() {
		/* Entry action for state 'overheat'. */
		timerService.setTimer(this, 1, (3l * 1000l), false);
		setMessage("OVERHEAT");
	}
	
	/* Entry action for state 'cooling'. */
	private void entryAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling() {
		/* Entry action for state 'cooling'. */
		timerService.setTimer(this, 2, (1l * 1000l), false);
		device.setIsOn(false);
		heat.setLevel(heat.getLevel() - (heat.decrement));
		heat.setUser_warned(false);
	}
	
	/* Entry action for state 'fully_rested'. */
	private void entryAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__fully_rested() {
		/* Entry action for state 'fully_rested'. */
		setFully_rested(true);
	}
	
	/* Exit action for state 'heatingUp'. */
	private void exitAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp() {
		/* Exit action for state 'heatingUp'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'overheat'. */
	private void exitAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat() {
		/* Exit action for state 'overheat'. */
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'cooling'. */
	private void exitAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling() {
		/* Exit action for state 'cooling'. */
		timerService.unsetTimer(this, 2);
	}
	
	/* 'default' enter sequence for state <Temperature_Component> */
	private void enterSequence__DeviceTemp_Component___Temperature_Component__default() {
		/* 'default' enter sequence for state <Temperature_Component> */
		enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__default();
	}
	
	/* 'default' enter sequence for state restState */
	private void enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState_default() {
		/* 'default' enter sequence for state restState */
		entryAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState();
		stateVector[0] = State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__RESTSTATE;
	}
	
	/* 'default' enter sequence for state heatingUp */
	private void enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp_default() {
		/* 'default' enter sequence for state heatingUp */
		entryAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp();
		stateVector[0] = State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__HEATINGUP;
	}
	
	/* 'default' enter sequence for state overheat */
	private void enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat_default() {
		/* 'default' enter sequence for state overheat */
		entryAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat();
		stateVector[0] = State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__OVERHEAT;
	}
	
	/* 'default' enter sequence for state coolingState */
	private void enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState_default() {
		/* 'default' enter sequence for state coolingState */
		enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__default();
	}
	
	/* 'default' enter sequence for state cooling */
	private void enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling_default() {
		/* 'default' enter sequence for state cooling */
		entryAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling();
		stateVector[0] = State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__COOLING;
	}
	
	/* 'default' enter sequence for state fully_rested */
	private void enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__fully_rested_default() {
		/* 'default' enter sequence for state fully_rested */
		entryAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__fully_rested();
		stateVector[0] = State._DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED;
	}
	
	/* 'default' enter sequence for region <DeviceTemp_Component> */
	private void enterSequence__DeviceTemp_Component__default() {
		/* 'default' enter sequence for region <DeviceTemp_Component> */
		react__DeviceTemp_Component___entry_Default();
	}
	
	/* 'default' enter sequence for region <Monitoring_Device_Temperature> */
	private void enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__default() {
		/* 'default' enter sequence for region <Monitoring_Device_Temperature> */
		react__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature___entry_Default();
	}
	
	/* 'default' enter sequence for region <Device_Cooling_Down> */
	private void enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__default() {
		/* 'default' enter sequence for region <Device_Cooling_Down> */
		react__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down___entry_Default();
	}
	
	/* Default exit sequence for state restState */
	private void exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState() {
		/* Default exit sequence for state restState */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state heatingUp */
	private void exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp() {
		/* Default exit sequence for state heatingUp */
		stateVector[0] = State.$NULLSTATE$;
		exitAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp();
	}
	
	/* Default exit sequence for state overheat */
	private void exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat() {
		/* Default exit sequence for state overheat */
		stateVector[0] = State.$NULLSTATE$;
		exitAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat();
	}
	
	/* Default exit sequence for state coolingState */
	private void exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState() {
		/* Default exit sequence for state coolingState */
		exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down_();
	}
	
	/* Default exit sequence for state cooling */
	private void exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling() {
		/* Default exit sequence for state cooling */
		stateVector[0] = State.$NULLSTATE$;
		exitAction__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling();
	}
	
	/* Default exit sequence for state fully_rested */
	private void exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__fully_rested() {
		/* Default exit sequence for state fully_rested */
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region <DeviceTemp_Component> */
	private void exitSequence__DeviceTemp_Component_() {
		/* Default exit sequence for region <DeviceTemp_Component> */
		switch (stateVector[0]) {
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__RESTSTATE:
			exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState();
			break;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__HEATINGUP:
			exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp();
			break;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__OVERHEAT:
			exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat();
			break;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__COOLING:
			exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling();
			break;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED:
			exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__fully_rested();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region <Device_Cooling_Down> */
	private void exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down_() {
		/* Default exit sequence for region <Device_Cooling_Down> */
		switch (stateVector[0]) {
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__COOLING:
			exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling();
			break;
		case _DEVICETEMP_COMPONENT___TEMPERATURE_COMPONENT___MONITORING_DEVICE_TEMPERATURE__COOLINGSTATE__DEVICE_COOLING_DOWN__FULLY_RESTED:
			exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__fully_rested();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__DeviceTemp_Component___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__DeviceTemp_Component___Temperature_Component__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down___entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling_default();
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		return transitioned_before
		;
	}
	
	private long _DeviceTemp_Component___Temperature_Component__react(long transitioned_before) {
		/* The reactions of state <Temperature_Component>. */
		long transitioned_after = transitioned_before;
		/* If no transition was taken then execute local reactions */
		transitioned_after = react(transitioned_before);
		return transitioned_after
		;
	}
	
	private long _DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState_react(long transitioned_before) {
		/* The reactions of state restState. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (device.getIsOn()) {
				exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState();
				enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp_default();
				_DeviceTemp_Component___Temperature_Component__react(0l);
				transitioned_after = 0l;
			} else {
				if (heat.getLevel()>0l) {
					exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState();
					enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState_default();
					_DeviceTemp_Component___Temperature_Component__react(0l);
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = _DeviceTemp_Component___Temperature_Component__react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long _DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp_react(long transitioned_before) {
		/* The reactions of state heatingUp. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (!device.getIsOn()) {
				exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp();
				enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState_default();
				_DeviceTemp_Component___Temperature_Component__react(0l);
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp();
					timeEvents[0] = false;
					enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp_default();
					_DeviceTemp_Component___Temperature_Component__react(0l);
					transitioned_after = 0l;
				} else {
					if (heat.getLevel()==(heat.getMax() - 2l)) {
						exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp();
						enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat_default();
						_DeviceTemp_Component___Temperature_Component__react(0l);
						transitioned_after = 0l;
					} else {
						if (heat.getLevel()>heat.getMax()) {
							exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp();
							enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState_default();
							_DeviceTemp_Component___Temperature_Component__react(0l);
							transitioned_after = 0l;
						}
					}
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = _DeviceTemp_Component___Temperature_Component__react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long _DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat_react(long transitioned_before) {
		/* The reactions of state overheat. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if ((((timeEvents[1] || heat.continueEvent)) && (!heat.getUser_warned()))) {
				exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat();
				heat.setUser_warned(true);
				timeEvents[1] = false;
				enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__heatingUp_default();
				_DeviceTemp_Component___Temperature_Component__react(0l);
				transitioned_after = 0l;
			} else {
				if (!device.getIsOn()) {
					exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__overheat();
					enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState_default();
					_DeviceTemp_Component___Temperature_Component__react(0l);
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = _DeviceTemp_Component___Temperature_Component__react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long _DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState_react(long transitioned_before) {
		/* The reactions of state coolingState. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (device.getIsOn()) {
				exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState();
				enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState_default();
				_DeviceTemp_Component___Temperature_Component__react(0l);
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = _DeviceTemp_Component___Temperature_Component__react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long _DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling_react(long transitioned_before) {
		/* The reactions of state cooling. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (heat.getLevel()==0l) {
				exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling();
				enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__fully_rested_default();
				_DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState_react(0l);
				transitioned_after = 0l;
			} else {
				if (timeEvents[2]) {
					exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling();
					timeEvents[2] = false;
					enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__cooling_default();
					_DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState_react(0l);
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = _DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState_react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long _DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState__Device_Cooling_Down__fully_rested_react(long transitioned_before) {
		/* The reactions of state fully_rested. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (getFully_rested()) {
				exitSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState();
				enterSequence__DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__restState_default();
				_DeviceTemp_Component___Temperature_Component__react(0l);
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = _DeviceTemp_Component___Temperature_Component___Monitoring_Device_Temperature__coolingState_react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public synchronized void triggerWithoutEvent() {
		runCycle();
	}
}
