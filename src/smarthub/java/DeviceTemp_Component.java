/** Generated by itemis CREATE code generator. */
package smarthub.java;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DeviceTemp_Component implements ITimed, IEventDriven {
	public static class Device {
		private DeviceTemp_Component parent;
		
		public Device(DeviceTemp_Component parent) {
			this.parent = parent;
		}
		private boolean isOn;
		
		public synchronized boolean getIsOn() {
			synchronized(parent) {
				return isOn;
			}
		}
		
		public void setIsOn(boolean value) {
			synchronized(parent) {
				this.isOn = value;
			}
		}
		
		private boolean cooling_down;
		
		public synchronized boolean getCooling_down() {
			synchronized(parent) {
				return cooling_down;
			}
		}
		
		public void setCooling_down(boolean value) {
			synchronized(parent) {
				this.cooling_down = value;
			}
		}
		
		private boolean heating_up;
		
		public synchronized boolean getHeating_up() {
			synchronized(parent) {
				return heating_up;
			}
		}
		
		public void setHeating_up(boolean value) {
			synchronized(parent) {
				this.heating_up = value;
			}
		}
		
	}
	
	public static class Heat {
		private DeviceTemp_Component parent;
		
		public Heat(DeviceTemp_Component parent) {
			this.parent = parent;
		}
		private boolean continueEvent;
		
		
		public void raiseContinue() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					continueEvent = true;
				});
				parent.runCycle();
			}
		}
		
		private long level;
		
		public synchronized long getLevel() {
			synchronized(parent) {
				return level;
			}
		}
		
		public void setLevel(long value) {
			synchronized(parent) {
				this.level = value;
			}
		}
		
		private long increment;
		
		public synchronized long getIncrement() {
			synchronized(parent) {
				return increment;
			}
		}
		
		public void setIncrement(long value) {
			synchronized(parent) {
				this.increment = value;
			}
		}
		
		private long decrement;
		
		public synchronized long getDecrement() {
			synchronized(parent) {
				return decrement;
			}
		}
		
		public void setDecrement(long value) {
			synchronized(parent) {
				this.decrement = value;
			}
		}
		
		private long max;
		
		public synchronized long getMax() {
			synchronized(parent) {
				return max;
			}
		}
		
		public void setMax(long value) {
			synchronized(parent) {
				this.max = value;
			}
		}
		
		private boolean user_warned;
		
		public synchronized boolean getUser_warned() {
			synchronized(parent) {
				return user_warned;
			}
		}
		
		public void setUser_warned(boolean value) {
			synchronized(parent) {
				this.user_warned = value;
			}
		}
		
	}
	
	protected Device device;
	
	protected Heat heat;
	
	public enum State {
		MAIN_REGION__TEMPERATURE_COMPONENT_,
		MAIN_REGION__TEMPERATURE_COMPONENT__R1_RESTSTATE,
		MAIN_REGION__TEMPERATURE_COMPONENT__R1_HEATINGUP,
		MAIN_REGION__TEMPERATURE_COMPONENT__R1_OVERHEAT,
		MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE,
		MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_COOLING,
		MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_FULLY_RESTED,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(DeviceTemp_Component.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(DeviceTemp_Component.this) {
			this.isExecuting = value;
		}
	}
	public DeviceTemp_Component() {
		device = new Device(this);
		heat = new Heat(this);
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setMessage("");
		
		setFully_rested(false);
		
		device.setIsOn(false);
		
		device.setCooling_down(false);
		
		device.setHeating_up(false);
		
		heat.setLevel(0l);
		
		heat.setIncrement(1l);
		
		heat.setDecrement(2l);
		
		heat.setMax(20l);
		
		heat.setUser_warned(false);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		heat.continueEvent = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_RESTSTATE:
			main_region__Temperature_Component__r1_restState_react(-1l);
			break;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_HEATINGUP:
			main_region__Temperature_Component__r1_heatingUp_react(-1l);
			break;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_OVERHEAT:
			main_region__Temperature_Component__r1_overheat_react(-1l);
			break;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_COOLING:
			main_region__Temperature_Component__r1_coolingState_set_rested_cooling_react(-1l);
			break;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_FULLY_RESTED:
			main_region__Temperature_Component__r1_coolingState_set_rested_fully_rested_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
		} while (nextEvent());
		
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION__TEMPERATURE_COMPONENT_:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION__TEMPERATURE_COMPONENT_.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_FULLY_RESTED.ordinal();
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_RESTSTATE:
			return stateVector[0] == State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_RESTSTATE;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_HEATINGUP:
			return stateVector[0] == State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_HEATINGUP;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_OVERHEAT:
			return stateVector[0] == State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_OVERHEAT;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_FULLY_RESTED.ordinal();
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_COOLING:
			return stateVector[0] == State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_COOLING;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_FULLY_RESTED:
			return stateVector[0] == State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_FULLY_RESTED;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Device device() {
		return device;
	}
	
	public Heat heat() {
		return heat;
	}
	
	
	private String message;
	
	public synchronized String getMessage() {
		synchronized(DeviceTemp_Component.this) {
			return message;
		}
	}
	
	public void setMessage(String value) {
		synchronized(DeviceTemp_Component.this) {
			this.message = value;
		}
	}
	
	private boolean fully_rested;
	
	public synchronized boolean getFully_rested() {
		synchronized(DeviceTemp_Component.this) {
			return fully_rested;
		}
	}
	
	public void setFully_rested(boolean value) {
		synchronized(DeviceTemp_Component.this) {
			this.fully_rested = value;
		}
	}
	
	/* Entry action for state 'restState'. */
	private void entryAction_main_region__Temperature_Component__r1_restState() {
		heat.setUser_warned(false);
	}
	
	/* Entry action for state 'heatingUp'. */
	private void entryAction_main_region__Temperature_Component__r1_heatingUp() {
		timerService.setTimer(this, 0, (1l * 1000l), false);
		
		heat.setLevel(heat.getLevel() + (heat.increment));
		
		setFully_rested(false);
	}
	
	/* Entry action for state 'overheat'. */
	private void entryAction_main_region__Temperature_Component__r1_overheat() {
		timerService.setTimer(this, 1, (3l * 1000l), false);
		
		setMessage("OVERHEAT");
	}
	
	/* Entry action for state 'cooling'. */
	private void entryAction_main_region__Temperature_Component__r1_coolingState_set_rested_cooling() {
		timerService.setTimer(this, 2, (1l * 1000l), false);
		
		device.setIsOn(false);
		
		heat.setLevel(heat.getLevel() - (heat.decrement));
		
		heat.setUser_warned(false);
	}
	
	/* Entry action for state 'fully_rested'. */
	private void entryAction_main_region__Temperature_Component__r1_coolingState_set_rested_fully_rested() {
		setFully_rested(true);
	}
	
	/* Exit action for state 'heatingUp'. */
	private void exitAction_main_region__Temperature_Component__r1_heatingUp() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'overheat'. */
	private void exitAction_main_region__Temperature_Component__r1_overheat() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'cooling'. */
	private void exitAction_main_region__Temperature_Component__r1_coolingState_set_rested_cooling() {
		timerService.unsetTimer(this, 2);
	}
	
	/* 'default' enter sequence for state <Temperature_Component> */
	private void enterSequence_main_region__Temperature_Component__default() {
		enterSequence_main_region__Temperature_Component__r1_default();
	}
	
	/* 'default' enter sequence for state restState */
	private void enterSequence_main_region__Temperature_Component__r1_restState_default() {
		entryAction_main_region__Temperature_Component__r1_restState();
		stateVector[0] = State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_RESTSTATE;
	}
	
	/* 'default' enter sequence for state heatingUp */
	private void enterSequence_main_region__Temperature_Component__r1_heatingUp_default() {
		entryAction_main_region__Temperature_Component__r1_heatingUp();
		stateVector[0] = State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_HEATINGUP;
	}
	
	/* 'default' enter sequence for state overheat */
	private void enterSequence_main_region__Temperature_Component__r1_overheat_default() {
		entryAction_main_region__Temperature_Component__r1_overheat();
		stateVector[0] = State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_OVERHEAT;
	}
	
	/* 'default' enter sequence for state coolingState */
	private void enterSequence_main_region__Temperature_Component__r1_coolingState_default() {
		enterSequence_main_region__Temperature_Component__r1_coolingState_set_rested_default();
	}
	
	/* 'default' enter sequence for state cooling */
	private void enterSequence_main_region__Temperature_Component__r1_coolingState_set_rested_cooling_default() {
		entryAction_main_region__Temperature_Component__r1_coolingState_set_rested_cooling();
		stateVector[0] = State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_COOLING;
	}
	
	/* 'default' enter sequence for state fully_rested */
	private void enterSequence_main_region__Temperature_Component__r1_coolingState_set_rested_fully_rested_default() {
		entryAction_main_region__Temperature_Component__r1_coolingState_set_rested_fully_rested();
		stateVector[0] = State.MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_FULLY_RESTED;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region__Temperature_Component__r1_default() {
		react_main_region__Temperature_Component__r1__entry_Default();
	}
	
	/* 'default' enter sequence for region set_rested */
	private void enterSequence_main_region__Temperature_Component__r1_coolingState_set_rested_default() {
		react_main_region__Temperature_Component__r1_coolingState_set_rested__entry_Default();
	}
	
	/* Default exit sequence for state restState */
	private void exitSequence_main_region__Temperature_Component__r1_restState() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state heatingUp */
	private void exitSequence_main_region__Temperature_Component__r1_heatingUp() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region__Temperature_Component__r1_heatingUp();
	}
	
	/* Default exit sequence for state overheat */
	private void exitSequence_main_region__Temperature_Component__r1_overheat() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region__Temperature_Component__r1_overheat();
	}
	
	/* Default exit sequence for state coolingState */
	private void exitSequence_main_region__Temperature_Component__r1_coolingState() {
		exitSequence_main_region__Temperature_Component__r1_coolingState_set_rested();
	}
	
	/* Default exit sequence for state cooling */
	private void exitSequence_main_region__Temperature_Component__r1_coolingState_set_rested_cooling() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region__Temperature_Component__r1_coolingState_set_rested_cooling();
	}
	
	/* Default exit sequence for state fully_rested */
	private void exitSequence_main_region__Temperature_Component__r1_coolingState_set_rested_fully_rested() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_RESTSTATE:
			exitSequence_main_region__Temperature_Component__r1_restState();
			break;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_HEATINGUP:
			exitSequence_main_region__Temperature_Component__r1_heatingUp();
			break;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_OVERHEAT:
			exitSequence_main_region__Temperature_Component__r1_overheat();
			break;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_COOLING:
			exitSequence_main_region__Temperature_Component__r1_coolingState_set_rested_cooling();
			break;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_FULLY_RESTED:
			exitSequence_main_region__Temperature_Component__r1_coolingState_set_rested_fully_rested();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region set_rested */
	private void exitSequence_main_region__Temperature_Component__r1_coolingState_set_rested() {
		switch (stateVector[0]) {
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_COOLING:
			exitSequence_main_region__Temperature_Component__r1_coolingState_set_rested_cooling();
			break;
		case MAIN_REGION__TEMPERATURE_COMPONENT__R1_COOLINGSTATE_SET_RESTED_FULLY_RESTED:
			exitSequence_main_region__Temperature_Component__r1_coolingState_set_rested_fully_rested();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region__Temperature_Component__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__Temperature_Component__r1__entry_Default() {
		enterSequence_main_region__Temperature_Component__r1_restState_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__Temperature_Component__r1_coolingState_set_rested__entry_Default() {
		enterSequence_main_region__Temperature_Component__r1_coolingState_set_rested_cooling_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region__Temperature_Component__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = react(transitioned_before);
		
		return transitioned_after;
	}
	
	private long main_region__Temperature_Component__r1_restState_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (device.getIsOn()) {
				exitSequence_main_region__Temperature_Component__r1_restState();
				enterSequence_main_region__Temperature_Component__r1_heatingUp_default();
				main_region__Temperature_Component__react(0l);
				
				transitioned_after = 0l;
			} else {
				if (heat.getLevel()>0l) {
					exitSequence_main_region__Temperature_Component__r1_restState();
					enterSequence_main_region__Temperature_Component__r1_coolingState_default();
					main_region__Temperature_Component__react(0l);
					
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region__Temperature_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region__Temperature_Component__r1_heatingUp_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (!device.getIsOn()) {
				exitSequence_main_region__Temperature_Component__r1_heatingUp();
				enterSequence_main_region__Temperature_Component__r1_restState_default();
				main_region__Temperature_Component__react(0l);
				
				transitioned_after = 0l;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region__Temperature_Component__r1_heatingUp();
					timeEvents[0] = false;
					enterSequence_main_region__Temperature_Component__r1_heatingUp_default();
					main_region__Temperature_Component__react(0l);
					
					transitioned_after = 0l;
				} else {
					if (heat.getLevel()==(heat.getMax() - 2l)) {
						exitSequence_main_region__Temperature_Component__r1_heatingUp();
						enterSequence_main_region__Temperature_Component__r1_overheat_default();
						main_region__Temperature_Component__react(0l);
						
						transitioned_after = 0l;
					} else {
						if (heat.getLevel()>heat.getMax()) {
							exitSequence_main_region__Temperature_Component__r1_heatingUp();
							enterSequence_main_region__Temperature_Component__r1_coolingState_default();
							main_region__Temperature_Component__react(0l);
							
							transitioned_after = 0l;
						}
					}
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region__Temperature_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region__Temperature_Component__r1_overheat_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if ((((timeEvents[1] || heat.continueEvent)) && (!heat.getUser_warned()))) {
				exitSequence_main_region__Temperature_Component__r1_overheat();
				heat.setUser_warned(true);
				
				timeEvents[1] = false;
				enterSequence_main_region__Temperature_Component__r1_heatingUp_default();
				main_region__Temperature_Component__react(0l);
				
				transitioned_after = 0l;
			} else {
				if (!device.getIsOn()) {
					exitSequence_main_region__Temperature_Component__r1_overheat();
					enterSequence_main_region__Temperature_Component__r1_coolingState_default();
					main_region__Temperature_Component__react(0l);
					
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region__Temperature_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region__Temperature_Component__r1_coolingState_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (device.getIsOn()) {
				exitSequence_main_region__Temperature_Component__r1_coolingState();
				enterSequence_main_region__Temperature_Component__r1_restState_default();
				main_region__Temperature_Component__react(0l);
				
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region__Temperature_Component__react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region__Temperature_Component__r1_coolingState_set_rested_cooling_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (heat.getLevel()==0l) {
				exitSequence_main_region__Temperature_Component__r1_coolingState_set_rested_cooling();
				enterSequence_main_region__Temperature_Component__r1_coolingState_set_rested_fully_rested_default();
				main_region__Temperature_Component__r1_coolingState_react(0l);
				
				transitioned_after = 0l;
			} else {
				if (timeEvents[2]) {
					exitSequence_main_region__Temperature_Component__r1_coolingState_set_rested_cooling();
					timeEvents[2] = false;
					enterSequence_main_region__Temperature_Component__r1_coolingState_set_rested_cooling_default();
					main_region__Temperature_Component__r1_coolingState_react(0l);
					
					transitioned_after = 0l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region__Temperature_Component__r1_coolingState_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region__Temperature_Component__r1_coolingState_set_rested_fully_rested_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (getFully_rested()) {
				exitSequence_main_region__Temperature_Component__r1_coolingState();
				enterSequence_main_region__Temperature_Component__r1_restState_default();
				main_region__Temperature_Component__react(0l);
				
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region__Temperature_Component__r1_coolingState_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public synchronized void triggerWithoutEvent() {
		runCycle();
	}
}
