/** Generated by itemis CREATE code generator. */
package smarthub.java;

import com.yakindu.core.IEventDriven;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class Environment implements ITimed, IEventDriven {
	public static class Clock {
		private Environment parent;
		
		public Clock(Environment parent) {
			this.parent = parent;
		}
		private boolean run;
		
		
		public void raiseRun() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					run = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean stop;
		
		
		public void raiseStop() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					stop = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean reset;
		
		
		public void raiseReset() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					reset = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean running;
		
		public synchronized boolean getRunning() {
			synchronized(parent) {
				return running;
			}
		}
		
		public void setRunning(boolean value) {
			synchronized(parent) {
				this.running = value;
			}
		}
		
		private long timeRunning;
		
		public synchronized long getTimeRunning() {
			synchronized(parent) {
				return timeRunning;
			}
		}
		
		public void setTimeRunning(long value) {
			synchronized(parent) {
				this.timeRunning = value;
			}
		}
		
	}
	
	public static class Evaluator {
		private Environment parent;
		
		public Evaluator(Environment parent) {
			this.parent = parent;
		}
		private boolean launch;
		
		
		public void raiseLaunch() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					launch = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean start;
		
		
		public void raiseStart() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					start = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean terminate;
		
		
		public void raiseTerminate() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					terminate = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean cycle;
		
		
		public void raiseCycle() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					cycle = true;
				});
				parent.runCycle();
			}
		}
		
		private long randomVal;
		
		public synchronized long getRandomVal() {
			synchronized(parent) {
				return randomVal;
			}
		}
		
		public void setRandomVal(long value) {
			synchronized(parent) {
				this.randomVal = value;
			}
		}
		
		private boolean processing;
		
		public synchronized boolean getProcessing() {
			synchronized(parent) {
				return processing;
			}
		}
		
		public void setProcessing(boolean value) {
			synchronized(parent) {
				this.processing = value;
			}
		}
		
		private boolean reading;
		
		public synchronized boolean getReading() {
			synchronized(parent) {
				return reading;
			}
		}
		
		public void setReading(boolean value) {
			synchronized(parent) {
				this.reading = value;
			}
		}
		
		private boolean generating;
		
		public synchronized boolean getGenerating() {
			synchronized(parent) {
				return generating;
			}
		}
		
		public void setGenerating(boolean value) {
			synchronized(parent) {
				this.generating = value;
			}
		}
		
		private boolean terminated;
		
		public synchronized boolean getTerminated() {
			synchronized(parent) {
				return terminated;
			}
		}
		
		public void setTerminated(boolean value) {
			synchronized(parent) {
				this.terminated = value;
			}
		}
		
		private boolean booleanOutput;
		
		public synchronized boolean getBooleanOutput() {
			synchronized(parent) {
				return booleanOutput;
			}
		}
		
		public void setBooleanOutput(boolean value) {
			synchronized(parent) {
				this.booleanOutput = value;
			}
		}
		
		private long numericalOutput;
		
		public synchronized long getNumericalOutput() {
			synchronized(parent) {
				return numericalOutput;
			}
		}
		
		public void setNumericalOutput(long value) {
			synchronized(parent) {
				this.numericalOutput = value;
			}
		}
		
	}
	
	public static class Time {
		private Environment parent;
		
		public Time(Environment parent) {
			this.parent = parent;
		}
		private long process;
		
		public synchronized long getProcess() {
			synchronized(parent) {
				return process;
			}
		}
		
		public void setProcess(long value) {
			synchronized(parent) {
				this.process = value;
			}
		}
		
		private long read;
		
		public synchronized long getRead() {
			synchronized(parent) {
				return read;
			}
		}
		
		public void setRead(long value) {
			synchronized(parent) {
				this.read = value;
			}
		}
		
		private long generate;
		
		public synchronized long getGenerate() {
			synchronized(parent) {
				return generate;
			}
		}
		
		public void setGenerate(long value) {
			synchronized(parent) {
				this.generate = value;
			}
		}
		
	}
	
	public static class Sensor {
		private Environment parent;
		
		public Sensor(Environment parent) {
			this.parent = parent;
		}
		private boolean launchConnection;
		
		public synchronized boolean getLaunchConnection() {
			synchronized(parent) {
				return launchConnection;
			}
		}
		
		public void setLaunchConnection(boolean value) {
			synchronized(parent) {
				this.launchConnection = value;
			}
		}
		
		private boolean booleanOutput;
		
		public synchronized boolean getBooleanOutput() {
			synchronized(parent) {
				return booleanOutput;
			}
		}
		
		public void setBooleanOutput(boolean value) {
			synchronized(parent) {
				this.booleanOutput = value;
			}
		}
		
		private long numericalOutput;
		
		public synchronized long getNumericalOutput() {
			synchronized(parent) {
				return numericalOutput;
			}
		}
		
		public void setNumericalOutput(long value) {
			synchronized(parent) {
				this.numericalOutput = value;
			}
		}
		
	}
	
	protected Clock clock;
	
	protected Evaluator evaluator;
	
	protected Time time;
	
	protected Sensor sensor;
	
	public enum State {
		SIMENVIRONMENT_STOP_SIMULATION,
		SIMENVIRONMENT_START_SIMULATION,
		SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_INITIALIZE_SIMULATION,
		SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN,
		SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHGLOBALCLOCK,
		SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHEVALUATOR,
		SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_EVALUATORTERMINATED,
		SIMENVIRONMENT_START_SIMULATION_CLOCK_STOP_CLOCK,
		SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK,
		SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING,
		SIMENVIRONMENT_START_SIMULATION_SENSOR_LAUNCHSENSOR,
		SIMENVIRONMENT_START_SIMULATION_SENSOR_SENDINGSIGNALTOSENSOR,
		SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR,
		SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_ONWAIT,
		SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING,
		SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_PROCESSING,
		SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_READING,
		SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING,
		SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_GENERATE_RANDOM_NUMBERS,
		SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_TRUE,
		SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_FALSE,
		SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_TERMINATE,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[3];
	private final State[] stateVector = new State[4];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[8];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean completed;
	
	protected boolean getCompleted() {
		synchronized(Environment.this) {
			return completed;
		}
	}
	
	protected void setCompleted(boolean value) {
		synchronized(Environment.this) {
			this.completed = value;
		}
	}
	private boolean doCompletion;
	
	protected boolean getDoCompletion() {
		synchronized(Environment.this) {
			return doCompletion;
		}
	}
	
	protected void setDoCompletion(boolean value) {
		synchronized(Environment.this) {
			this.doCompletion = value;
		}
	}
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(Environment.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(Environment.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(Environment.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(Environment.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public Environment() {
		clock = new Clock(this);
		evaluator = new Evaluator(this);
		time = new Time(this);
		sensor = new Sensor(this);
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 3; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		clock.setRunning(false);
		
		clock.setTimeRunning(0l);
		
		evaluator.setRandomVal(0l);
		
		evaluator.setProcessing(false);
		
		evaluator.setReading(false);
		
		evaluator.setGenerating(false);
		
		evaluator.setTerminated(false);
		
		evaluator.setBooleanOutput(false);
		
		evaluator.setNumericalOutput(0l);
		
		time.setProcess(5l);
		
		time.setRead(5l);
		
		time.setGenerate(9999l);
		
		sensor.setLaunchConnection(false);
		
		sensor.setBooleanOutput(false);
		
		sensor.setNumericalOutput(0l);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_SimEnvironment_default();
		doCompletion = false;
		
		do { 
			if (getCompleted()) {
				doCompletion = true;
			}
			completed = false;
			
			microStep();
			
			doCompletion = false;
		} while (getCompleted());
		
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_SimEnvironment();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		run = false;
		start = false;
		stop = false;
		clock.run = false;
		clock.stop = false;
		clock.reset = false;
		evaluator.launch = false;
		evaluator.start = false;
		evaluator.terminate = false;
		evaluator.cycle = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		
		stateConfVectorPosition = 0l;
		
		switch (stateVector[0]) {
		case SIMENVIRONMENT_STOP_SIMULATION:
			transitioned = simEnvironment_Stop_Simulation_react(transitioned);
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_INITIALIZE_SIMULATION:
			transitioned = simEnvironment_Start_Simulation_Initialization_Initialize_Simulation_react(transitioned);
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHGLOBALCLOCK:
			transitioned = simEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock_react(transitioned);
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHEVALUATOR:
			transitioned = simEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator_react(transitioned);
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_EVALUATORTERMINATED:
			transitioned = simEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case SIMENVIRONMENT_START_SIMULATION_CLOCK_STOP_CLOCK:
				transitioned = simEnvironment_Start_Simulation_Clock_Stop_Clock_react(transitioned);
				break;
			case SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING:
				transitioned = simEnvironment_Start_Simulation_Clock_Run_Clock_running_Running_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case SIMENVIRONMENT_START_SIMULATION_SENSOR_LAUNCHSENSOR:
				transitioned = simEnvironment_Start_Simulation_Sensor_LaunchSensor_react(transitioned);
				break;
			case SIMENVIRONMENT_START_SIMULATION_SENSOR_SENDINGSIGNALTOSENSOR:
				transitioned = simEnvironment_Start_Simulation_Sensor_SendingSignalToSensor_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_ONWAIT:
				simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_OnWait_react(transitioned);
				break;
			case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_PROCESSING:
				simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing_react(transitioned);
				break;
			case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_READING:
				simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading_react(transitioned);
				break;
			case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_GENERATE_RANDOM_NUMBERS:
				simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_generate_random_numbers_react(transitioned);
				break;
			case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_TRUE:
				simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true_react(transitioned);
				break;
			case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_FALSE:
				simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false_react(transitioned);
				break;
			case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_TERMINATE:
				simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			doCompletion = false;
			
			do { 
				if (getCompleted()) {
					doCompletion = true;
				}
				completed = false;
				
				microStep();
				
				doCompletion = false;
			} while (getCompleted());
			
			clearInEvents();
		} while (nextEvent());
		
		isExecuting = false;
	}
	
	protected boolean nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return true;
		}
		return false;
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case SIMENVIRONMENT_STOP_SIMULATION:
			return stateVector[0] == State.SIMENVIRONMENT_STOP_SIMULATION;
		case SIMENVIRONMENT_START_SIMULATION:
			return stateVector[0].ordinal() >= State.
					SIMENVIRONMENT_START_SIMULATION.ordinal()&& stateVector[0].ordinal() <= State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_TERMINATE.ordinal();
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_INITIALIZE_SIMULATION:
			return stateVector[0] == State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_INITIALIZE_SIMULATION;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN:
			return stateVector[0].ordinal() >= State.
					SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN.ordinal()&& stateVector[0].ordinal() <= State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_EVALUATORTERMINATED.ordinal();
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHGLOBALCLOCK:
			return stateVector[0] == State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHGLOBALCLOCK;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHEVALUATOR:
			return stateVector[0] == State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHEVALUATOR;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_EVALUATORTERMINATED:
			return stateVector[0] == State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_EVALUATORTERMINATED;
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_STOP_CLOCK:
			return stateVector[1] == State.SIMENVIRONMENT_START_SIMULATION_CLOCK_STOP_CLOCK;
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK:
			return stateVector[1].ordinal() >= State.
					SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK.ordinal()&& stateVector[1].ordinal() <= State.SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING.ordinal();
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING:
			return stateVector[1] == State.SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING;
		case SIMENVIRONMENT_START_SIMULATION_SENSOR_LAUNCHSENSOR:
			return stateVector[2] == State.SIMENVIRONMENT_START_SIMULATION_SENSOR_LAUNCHSENSOR;
		case SIMENVIRONMENT_START_SIMULATION_SENSOR_SENDINGSIGNALTOSENSOR:
			return stateVector[2] == State.SIMENVIRONMENT_START_SIMULATION_SENSOR_SENDINGSIGNALTOSENSOR;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR:
			return stateVector[3].ordinal() >= State.
					SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR.ordinal()&& stateVector[3].ordinal() <= State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_TERMINATE.ordinal();
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_ONWAIT:
			return stateVector[3] == State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_ONWAIT;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING:
			return stateVector[3].ordinal() >= State.
					SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING.ordinal()&& stateVector[3].ordinal() <= State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_TERMINATE.ordinal();
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_PROCESSING:
			return stateVector[3] == State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_PROCESSING;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_READING:
			return stateVector[3] == State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_READING;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING:
			return stateVector[3].ordinal() >= State.
					SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING.ordinal()&& stateVector[3].ordinal() <= State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_FALSE.ordinal();
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_GENERATE_RANDOM_NUMBERS:
			return stateVector[3] == State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_GENERATE_RANDOM_NUMBERS;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_TRUE:
			return stateVector[3] == State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_TRUE;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_FALSE:
			return stateVector[3] == State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_FALSE;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_TERMINATE:
			return stateVector[3] == State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_TERMINATE;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Clock clock() {
		return clock;
	}
	
	public Evaluator evaluator() {
		return evaluator;
	}
	
	public Time time() {
		return time;
	}
	
	public Sensor sensor() {
		return sensor;
	}
	
	
	private boolean run;
	
	
	public void raiseRun() {
		synchronized(Environment.this) {
			inEventQueue.add(() -> {
				run = true;
			});
			runCycle();
		}
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		synchronized(Environment.this) {
			inEventQueue.add(() -> {
				start = true;
			});
			runCycle();
		}
	}
	
	private boolean stop;
	
	
	public void raiseStop() {
		synchronized(Environment.this) {
			inEventQueue.add(() -> {
				stop = true;
			});
			runCycle();
		}
	}
	
	private void effect_SimEnvironment_Start_Simulation_Clock_Run_Clock_tr1() {
		exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock();
		enterSequence_SimEnvironment_Start_Simulation_Clock_Stop_Clock_default();
	}
	
	/* Entry action for state 'LaunchGlobalClock'. */
	private void entryAction_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock() {
		clock.raiseRun();
	}
	
	/* Entry action for state 'LaunchEvaluator'. */
	private void entryAction_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator() {
		evaluator.raiseStart();
	}
	
	/* Entry action for state 'EvaluatorTerminated'. */
	private void entryAction_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated() {
		timerService.setTimer(this, 0, (5l * 1000l), false);
	}
	
	/* Entry action for state 'Stop_Clock'. */
	private void entryAction_SimEnvironment_Start_Simulation_Clock_Stop_Clock() {
		clock.setRunning(false);
	}
	
	/* Entry action for state 'Run_Clock'. */
	private void entryAction_SimEnvironment_Start_Simulation_Clock_Run_Clock() {
		clock.setRunning(true);
		
		evaluator.raiseLaunch();
	}
	
	/* Entry action for state 'Running'. */
	private void entryAction_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running() {
		timerService.setTimer(this, 1, (1l * 1000l), true);
		
		clock.timeRunning++;
	}
	
	/* Entry action for state 'LaunchSensor'. */
	private void entryAction_SimEnvironment_Start_Simulation_Sensor_LaunchSensor() {
		if (clock.getRunning()) {
			sensor.setLaunchConnection(true);
		}
	}
	
	/* Entry action for state 'SendingSignalToSensor'. */
	private void entryAction_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor() {
		timerService.setTimer(this, 2, (1l * 1000l), false);
		
		sensor.setBooleanOutput(evaluator.booleanOutput);
		
		sensor.setNumericalOutput(evaluator.numericalOutput);
	}
	
	/* Entry action for state 'processing'. */
	private void entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing() {
		timerService.setTimer(this, 3, (time.getProcess() * 1000l), false);
		
		evaluator.setProcessing(true);
	}
	
	/* Entry action for state 'reading'. */
	private void entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading() {
		timerService.setTimer(this, 4, (time.getRead() * 1000l), false);
		
		evaluator.setReading(true);
	}
	
	/* Entry action for state 'generating'. */
	private void entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating() {
		timerService.setTimer(this, 5, (time.getGenerate() * 1000l), false);
		
		evaluator.setGenerating(true);
	}
	
	private void entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_generate_random_numbers() {
		if (evaluator.getRandomVal()==1l) {
			evaluator.setBooleanOutput(false);
			
			evaluator.setRandomVal(0l);
		}
		if (evaluator.getRandomVal()==0l) {
			evaluator.setBooleanOutput(true);
			
			evaluator.setRandomVal(1l);
		}
		completed = true;
	}
	
	/* Entry action for state 'true'. */
	private void entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true() {
		timerService.setTimer(this, 6, (1l * 1000l), false);
	}
	
	/* Entry action for state 'false'. */
	private void entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false() {
		timerService.setTimer(this, 7, (1l * 1000l), false);
	}
	
	/* Entry action for state 'terminate'. */
	private void entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate() {
		evaluator.setTerminated(true);
		
		evaluator.raiseTerminate();
	}
	
	/* Exit action for state 'EvaluatorTerminated'. */
	private void exitAction_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Running'. */
	private void exitAction_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'SendingSignalToSensor'. */
	private void exitAction_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'processing'. */
	private void exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing() {
		timerService.unsetTimer(this, 3);
		
		evaluator.setProcessing(false);
	}
	
	/* Exit action for state 'reading'. */
	private void exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading() {
		timerService.unsetTimer(this, 4);
		
		evaluator.setReading(false);
	}
	
	/* Exit action for state 'generating'. */
	private void exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating() {
		timerService.unsetTimer(this, 5);
		
		evaluator.setGenerating(false);
	}
	
	/* Exit action for state 'true'. */
	private void exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true() {
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'false'. */
	private void exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false() {
		timerService.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'terminate'. */
	private void exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate() {
		evaluator.setTerminated(false);
	}
	
	/* 'default' enter sequence for state Stop_Simulation */
	private void enterSequence_SimEnvironment_Stop_Simulation_default() {
		stateVector[0] = State.SIMENVIRONMENT_STOP_SIMULATION;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Start_Simulation */
	private void enterSequence_SimEnvironment_Start_Simulation_default() {
		enterSequence_SimEnvironment_Start_Simulation_Initialization_default();
		enterSequence_SimEnvironment_Start_Simulation_Clock_default();
		enterSequence_SimEnvironment_Start_Simulation_Sensor_default();
		enterSequence_SimEnvironment_Start_Simulation_Evaluator_default();
	}
	
	/* 'default' enter sequence for state Initialize_Simulation */
	private void enterSequence_SimEnvironment_Start_Simulation_Initialization_Initialize_Simulation_default() {
		stateVector[0] = State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_INITIALIZE_SIMULATION;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Run */
	private void enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_default() {
		enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_default();
	}
	
	/* 'default' enter sequence for state LaunchGlobalClock */
	private void enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock_default() {
		entryAction_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock();
		stateVector[0] = State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHGLOBALCLOCK;
		stateConfVectorPosition = 0;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state LaunchEvaluator */
	private void enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator_default() {
		entryAction_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator();
		stateVector[0] = State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHEVALUATOR;
		stateConfVectorPosition = 0;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state EvaluatorTerminated */
	private void enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated_default() {
		entryAction_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated();
		stateVector[0] = State.SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_EVALUATORTERMINATED;
		stateConfVectorPosition = 0;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Stop_Clock */
	private void enterSequence_SimEnvironment_Start_Simulation_Clock_Stop_Clock_default() {
		entryAction_SimEnvironment_Start_Simulation_Clock_Stop_Clock();
		stateVector[1] = State.SIMENVIRONMENT_START_SIMULATION_CLOCK_STOP_CLOCK;
		stateConfVectorPosition = 1;
		
		historyVector[1] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Run_Clock */
	private void enterSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_default() {
		entryAction_SimEnvironment_Start_Simulation_Clock_Run_Clock();
		enterSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_default();
		historyVector[1] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Running */
	private void enterSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running_default() {
		entryAction_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running();
		stateVector[1] = State.SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING;
		stateConfVectorPosition = 1;
		
		historyVector[2] = stateVector[1];
	}
	
	/* 'default' enter sequence for state LaunchSensor */
	private void enterSequence_SimEnvironment_Start_Simulation_Sensor_LaunchSensor_default() {
		entryAction_SimEnvironment_Start_Simulation_Sensor_LaunchSensor();
		stateVector[2] = State.SIMENVIRONMENT_START_SIMULATION_SENSOR_LAUNCHSENSOR;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state SendingSignalToSensor */
	private void enterSequence_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor_default() {
		entryAction_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor();
		stateVector[2] = State.SIMENVIRONMENT_START_SIMULATION_SENSOR_SENDINGSIGNALTOSENSOR;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state EnvironmentEvaluator */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_default() {
		enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_default();
	}
	
	/* 'default' enter sequence for state OnWait */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_OnWait_default() {
		stateVector[3] = State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_ONWAIT;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state Evaluating */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_default() {
		enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_default();
	}
	
	/* 'default' enter sequence for state processing */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing_default() {
		entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing();
		stateVector[3] = State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_PROCESSING;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state reading */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading_default() {
		entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading();
		stateVector[3] = State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_READING;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state generating */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_default() {
		entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating();
		enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_default();
	}
	
	/* 'default' enter sequence for state generate_random_numbers */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_generate_random_numbers_default() {
		entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_generate_random_numbers();
		stateVector[3] = State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_GENERATE_RANDOM_NUMBERS;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state true */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true_default() {
		entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true();
		stateVector[3] = State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_TRUE;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state false */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false_default() {
		entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false();
		stateVector[3] = State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_FALSE;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state terminate */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate_default() {
		entryAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate();
		stateVector[3] = State.SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_TERMINATE;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for region SimEnvironment */
	private void enterSequence_SimEnvironment_default() {
		react_SimEnvironment__entry_Default();
	}
	
	/* 'default' enter sequence for region Initialization */
	private void enterSequence_SimEnvironment_Start_Simulation_Initialization_default() {
		react_SimEnvironment_Start_Simulation_Initialization__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_default() {
		react_SimEnvironment_Start_Simulation_Initialization_Run_r1__entry_Default();
	}
	
	/* shallow enterSequence with history in child r1 */
	private void shallowEnterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1() {
		switch (historyVector[0]) {
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHGLOBALCLOCK:
			enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock_default();
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHEVALUATOR:
			enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator_default();
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_EVALUATORTERMINATED:
			enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region Clock */
	private void enterSequence_SimEnvironment_Start_Simulation_Clock_default() {
		react_SimEnvironment_Start_Simulation_Clock__entry_Default();
	}
	
	/* deep enterSequence with history in child Clock */
	private void deepEnterSequence_SimEnvironment_Start_Simulation_Clock() {
		switch (historyVector[1]) {
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_STOP_CLOCK:
			enterSequence_SimEnvironment_Start_Simulation_Clock_Stop_Clock_default();
			break;
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING:
			entryAction_SimEnvironment_Start_Simulation_Clock_Run_Clock();
			deepEnterSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region running */
	private void enterSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_default() {
		react_SimEnvironment_Start_Simulation_Clock_Run_Clock_running__entry_Default();
	}
	
	/* deep enterSequence with history in child running */
	private void deepEnterSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running() {
		switch (historyVector[2]) {
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING:
			enterSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region Sensor */
	private void enterSequence_SimEnvironment_Start_Simulation_Sensor_default() {
		react_SimEnvironment_Start_Simulation_Sensor__entry_Default();
	}
	
	/* 'default' enter sequence for region Evaluator */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_default() {
		react_SimEnvironment_Start_Simulation_Evaluator__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_default() {
		react_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_default() {
		react_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_default() {
		react_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1__entry_Default();
	}
	
	/* Default exit sequence for state Stop_Simulation */
	private void exitSequence_SimEnvironment_Stop_Simulation() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Start_Simulation */
	private void exitSequence_SimEnvironment_Start_Simulation() {
		exitSequence_SimEnvironment_Start_Simulation_Initialization();
		exitSequence_SimEnvironment_Start_Simulation_Clock();
		exitSequence_SimEnvironment_Start_Simulation_Sensor();
		exitSequence_SimEnvironment_Start_Simulation_Evaluator();
	}
	
	/* Default exit sequence for state Initialize_Simulation */
	private void exitSequence_SimEnvironment_Start_Simulation_Initialization_Initialize_Simulation() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state LaunchGlobalClock */
	private void exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state LaunchEvaluator */
	private void exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state EvaluatorTerminated */
	private void exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated();
	}
	
	/* Default exit sequence for state Stop_Clock */
	private void exitSequence_SimEnvironment_Start_Simulation_Clock_Stop_Clock() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Run_Clock */
	private void exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock() {
		exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running();
	}
	
	/* Default exit sequence for state Running */
	private void exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running();
	}
	
	/* Default exit sequence for state LaunchSensor */
	private void exitSequence_SimEnvironment_Start_Simulation_Sensor_LaunchSensor() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
	}
	
	/* Default exit sequence for state SendingSignalToSensor */
	private void exitSequence_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		
		exitAction_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor();
	}
	
	/* Default exit sequence for state OnWait */
	private void exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_OnWait() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state processing */
	private void exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing();
	}
	
	/* Default exit sequence for state reading */
	private void exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading();
	}
	
	/* Default exit sequence for state generating */
	private void exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating() {
		exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1();
		exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating();
	}
	
	/* Default exit sequence for state generate_random_numbers */
	private void exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_generate_random_numbers() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state true */
	private void exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true();
	}
	
	/* Default exit sequence for state false */
	private void exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false();
	}
	
	/* Default exit sequence for state terminate */
	private void exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate();
	}
	
	/* Default exit sequence for region SimEnvironment */
	private void exitSequence_SimEnvironment() {
		switch (stateVector[0]) {
		case SIMENVIRONMENT_STOP_SIMULATION:
			exitSequence_SimEnvironment_Stop_Simulation();
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_INITIALIZE_SIMULATION:
			exitSequence_SimEnvironment_Start_Simulation_Initialization_Initialize_Simulation();
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHGLOBALCLOCK:
			exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock();
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHEVALUATOR:
			exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator();
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_EVALUATORTERMINATED:
			exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_STOP_CLOCK:
			exitSequence_SimEnvironment_Start_Simulation_Clock_Stop_Clock();
			break;
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING:
			exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case SIMENVIRONMENT_START_SIMULATION_SENSOR_LAUNCHSENSOR:
			exitSequence_SimEnvironment_Start_Simulation_Sensor_LaunchSensor();
			break;
		case SIMENVIRONMENT_START_SIMULATION_SENSOR_SENDINGSIGNALTOSENSOR:
			exitSequence_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_ONWAIT:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_OnWait();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_PROCESSING:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_READING:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_GENERATE_RANDOM_NUMBERS:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_generate_random_numbers();
			exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_TRUE:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true();
			exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_FALSE:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false();
			exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_TERMINATE:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Initialization */
	private void exitSequence_SimEnvironment_Start_Simulation_Initialization() {
		switch (stateVector[0]) {
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_INITIALIZE_SIMULATION:
			exitSequence_SimEnvironment_Start_Simulation_Initialization_Initialize_Simulation();
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHGLOBALCLOCK:
			exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock();
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_LAUNCHEVALUATOR:
			exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator();
			break;
		case SIMENVIRONMENT_START_SIMULATION_INITIALIZATION_RUN_R1_EVALUATORTERMINATED:
			exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Clock */
	private void exitSequence_SimEnvironment_Start_Simulation_Clock() {
		switch (stateVector[1]) {
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_STOP_CLOCK:
			exitSequence_SimEnvironment_Start_Simulation_Clock_Stop_Clock();
			break;
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING:
			exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region running */
	private void exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running() {
		switch (stateVector[1]) {
		case SIMENVIRONMENT_START_SIMULATION_CLOCK_RUN_CLOCK_RUNNING_RUNNING:
			exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Sensor */
	private void exitSequence_SimEnvironment_Start_Simulation_Sensor() {
		switch (stateVector[2]) {
		case SIMENVIRONMENT_START_SIMULATION_SENSOR_LAUNCHSENSOR:
			exitSequence_SimEnvironment_Start_Simulation_Sensor_LaunchSensor();
			break;
		case SIMENVIRONMENT_START_SIMULATION_SENSOR_SENDINGSIGNALTOSENSOR:
			exitSequence_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Evaluator */
	private void exitSequence_SimEnvironment_Start_Simulation_Evaluator() {
		switch (stateVector[3]) {
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_ONWAIT:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_OnWait();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_PROCESSING:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_READING:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_GENERATE_RANDOM_NUMBERS:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_generate_random_numbers();
			exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_TRUE:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true();
			exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_FALSE:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false();
			exitAction_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_TERMINATE:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1() {
		switch (stateVector[3]) {
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_GENERATE_RANDOM_NUMBERS:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_generate_random_numbers();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_TRUE:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true();
			break;
		case SIMENVIRONMENT_START_SIMULATION_EVALUATOR_ENVIRONMENTEVALUATOR_R1_EVALUATING_R1_GENERATING_R1_FALSE:
			exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_SimEnvironment__entry_Default() {
		enterSequence_SimEnvironment_Stop_Simulation_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_SimEnvironment_Start_Simulation_Initialization__entry_Default() {
		enterSequence_SimEnvironment_Start_Simulation_Initialization_Initialize_Simulation_default();
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_SimEnvironment_Start_Simulation_Initialization_Run_r1__entry_Default() {
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1();
		} else {
			enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock_default();
		}
	}
	
	/* Default react sequence for deep history entry  */
	private void react_SimEnvironment_Start_Simulation_Clock__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[1] != State.$NULLSTATE$) {
			deepEnterSequence_SimEnvironment_Start_Simulation_Clock();
		} else {
			enterSequence_SimEnvironment_Start_Simulation_Clock_Stop_Clock_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_SimEnvironment_Start_Simulation_Clock_Run_Clock_running__entry_Default() {
		enterSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_SimEnvironment_Start_Simulation_Sensor__entry_Default() {
		enterSequence_SimEnvironment_Start_Simulation_Sensor_LaunchSensor_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_SimEnvironment_Start_Simulation_Evaluator__entry_Default() {
		enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1__entry_Default() {
		enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_OnWait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1__entry_Default() {
		enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1__entry_Default() {
		enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_generate_random_numbers_default();
	}
	
	/* The reactions of exit default. */
	private void react_SimEnvironment_Start_Simulation_Clock_Run_Clock_running__exit_Default() {
		effect_SimEnvironment_Start_Simulation_Clock_Run_Clock_tr1();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long simEnvironment_Stop_Simulation_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<0l) {
				if (start) {
					exitSequence_SimEnvironment_Stop_Simulation();
					enterSequence_SimEnvironment_Start_Simulation_default();
					react(0l);
					
					transitioned_after = 0l;
				}
			}
			if (transitioned_after==transitioned_before) {
				transitioned_after = react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<0l) {
				if (stop) {
					exitSequence_SimEnvironment_Start_Simulation();
					enterSequence_SimEnvironment_Stop_Simulation_default();
					react(0l);
					
					transitioned_after = 3l;
				}
			}
			if (transitioned_after==transitioned_before) {
				transitioned_after = react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Initialization_Initialize_Simulation_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<0l) {
				if (run) {
					exitSequence_SimEnvironment_Start_Simulation_Initialization_Initialize_Simulation();
					enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Initialization_Run_react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long simEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<0l) {
				if (clock.reset) {
					exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock();
					clock.raiseStop();
					
					enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock_default();
					simEnvironment_Start_Simulation_Initialization_Run_react(0l);
					
					transitioned_after = 0l;
				} else {
					if (evaluator.launch) {
						exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchGlobalClock();
						enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator_default();
						simEnvironment_Start_Simulation_Initialization_Run_react(0l);
						
						transitioned_after = 0l;
					}
				}
			}
			if (transitioned_after==transitioned_before) {
				transitioned_after = simEnvironment_Start_Simulation_Initialization_Run_react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<0l) {
				if (evaluator.terminate) {
					exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator();
					enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated_default();
					simEnvironment_Start_Simulation_Initialization_Run_react(0l);
					
					transitioned_after = 0l;
				}
			}
			if (transitioned_after==transitioned_before) {
				transitioned_after = simEnvironment_Start_Simulation_Initialization_Run_react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<0l) {
				if (evaluator.cycle) {
					exitSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_EvaluatorTerminated();
					enterSequence_SimEnvironment_Start_Simulation_Initialization_Run_r1_LaunchEvaluator_default();
					simEnvironment_Start_Simulation_Initialization_Run_react(0l);
					
					transitioned_after = 0l;
				}
			}
			if (transitioned_after==transitioned_before) {
				if (timeEvents[0]) {
					evaluator.raiseCycle();
				}
				transitioned_after = simEnvironment_Start_Simulation_Initialization_Run_react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Clock_Stop_Clock_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<1l) {
				if (clock.run) {
					exitSequence_SimEnvironment_Start_Simulation_Clock_Stop_Clock();
					enterSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Clock_Run_Clock_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<1l) {
				if (clock.stop) {
					exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock();
					enterSequence_SimEnvironment_Start_Simulation_Clock_Stop_Clock_default();
					transitioned_after = 1l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Clock_Run_Clock_running_Running_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<1l) {
				if (timeEvents[1]) {
					exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running();
					timeEvents[1] = false;
					enterSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running_default();
					simEnvironment_Start_Simulation_Clock_Run_Clock_react(1l);
					
					transitioned_after = 1l;
				} else {
					if (clock.stop) {
						exitSequence_SimEnvironment_Start_Simulation_Clock_Run_Clock_running_Running();
						react_SimEnvironment_Start_Simulation_Clock_Run_Clock_running__exit_Default();
						transitioned_after = 1l;
					}
				}
			}
			if (transitioned_after==transitioned_before) {
				transitioned_after = simEnvironment_Start_Simulation_Clock_Run_Clock_react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Sensor_LaunchSensor_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<2l) {
				if (evaluator.start) {
					exitSequence_SimEnvironment_Start_Simulation_Sensor_LaunchSensor();
					enterSequence_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor_default();
					transitioned_after = 2l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Sensor_SendingSignalToSensor_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<2l) {
				if (timeEvents[2]) {
					exitSequence_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor();
					timeEvents[2] = false;
					enterSequence_SimEnvironment_Start_Simulation_Sensor_SendingSignalToSensor_default();
					transitioned_after = 2l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			transitioned_after = simEnvironment_Start_Simulation_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_OnWait_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<3l) {
				if (evaluator.start) {
					exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_OnWait();
					enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_default();
					simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_react(3l);
					
					transitioned_after = 3l;
				}
			}
			if (transitioned_after==transitioned_before) {
				transitioned_after = simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			transitioned_after = simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<3l) {
				if (timeEvents[3]) {
					exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_processing();
					timeEvents[3] = false;
					enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading_default();
					simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_react(3l);
					
					transitioned_after = 3l;
				}
			}
			if (transitioned_after==transitioned_before) {
				transitioned_after = simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<3l) {
				if (timeEvents[4]) {
					exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_reading();
					timeEvents[4] = false;
					enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_default();
					simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_react(3l);
					
					transitioned_after = 3l;
				}
			}
			if (transitioned_after==transitioned_before) {
				transitioned_after = simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<3l) {
				if (timeEvents[5]) {
					exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating();
					timeEvents[5] = false;
					enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate_default();
					simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_react(3l);
					
					transitioned_after = 3l;
				} else {
					if (evaluator.cycle) {
						exitSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating();
						enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_default();
						simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_react(3l);
						
						transitioned_after = 3l;
					}
				}
			}
			if (transitioned_after==transitioned_before) {
				transitioned_after = simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_generate_random_numbers_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (getDoCompletion()) {
			stateVector[3] = State.$NULLSTATE$;
			stateConfVectorPosition = 3;
			
			if (evaluator.getBooleanOutput()) {
				enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true_default();
			} else {
				enterSequence_SimEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false_default();
			}
		} else {
			transitioned_after = simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_react(transitioned_before);
		}
		
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_true_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (timeEvents[6]) {
				evaluator.raiseCycle();
			}
			transitioned_after = simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_r1_false_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (timeEvents[7]) {
				evaluator.raiseCycle();
			}
			transitioned_after = simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_generating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_r1_terminate_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			transitioned_after = simEnvironment_Start_Simulation_Evaluator_EnvironmentEvaluator_r1_Evaluating_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public synchronized void triggerWithoutEvent() {
		runCycle();
	}
}
