/** Generated by itemis CREATE code generator. */

#ifndef SC_YET_H
#define SC_YET_H

#include <stddef.h>
#include "sc_types.h"
#include "sc_rxc.h"

#ifdef __cplusplus
extern "C" {
#endif

#define YET_MESSAGE_INIT_BEGIN '%'
#define YET_MESSAGE_UPDATE_BEGIN '#'
#define YET_MESSAGE_SEPARATOR ','
#define YET_ERR_INVALID_MSG 1
#define YET_ERR_INVALID_BEGIN 2
#define YET_ERR_INVALID_TIMESTAMP 4
#define YET_ERR_INVALID_KEY 8
#define YET_ERR_INVALID_VALUE 16
#define YET_ERR_MISSING_VALUE 32
#define YET_ERR_NULLPTR 64

#ifndef YET_SCOPE_SEND_BUF_LEN
#define YET_SCOPE_SEND_BUF_LEN 255
#endif

enum yet_message_type {
	INIT,
	UPDATE
};

typedef uint64_t yet_timestamp;
typedef uint32_t yet_msize;
typedef uint16_t yet_error;

typedef struct yet_message yet_message;

struct yet_message {
	enum yet_message_type type;
	yet_timestamp timestamp;
	char* key;
	char* value;
};

/*! Determines the length of a yet_message in string representation. */
extern yet_msize yet_message_len(yet_message* msg);


typedef struct yet_scope yet_scope;

/**
 * When a scope is matched, its handler is called.
 * The handler should return 0 on success.
 */
typedef yet_error (*yet_handler)(yet_scope* scope, yet_message *msg, char *fqn);

struct yet_scope {
	yet_scope *parent_scope;
	yet_scope **child_scopes;
	sc_integer num_child_scopes;
	sc_string name;
	yet_handler handler;
	void* instance;

	sc_single_subscription_observer_sc_string   message_receiver;
	sc_observable_sc_string trace_messages;

};


/*
 * This function is called by tracing state machines.
 */
extern void yet_scope_send(yet_scope* self, struct yet_message * msg);

/*!
 * If a message was received, call this function to process it.
 */
extern void yet_scope_accept_message(yet_scope *scope, char *text);

extern void yet_scope_dispatch_message(yet_scope* scope, yet_message* msg, char *fqn);

extern char* yet_scope_create_message(yet_scope* scope, char* msg, char* dst, sc_boolean meta);

extern void yet_scope_init(yet_scope* scope, yet_scope* parent_scope, yet_scope** child_scopes, sc_integer num_child_scopes, char *name, yet_handler handler, void* instance);


typedef char* (*yet_value_serializer)(const void* from, char* to);

yet_value_serializer yet_int_serializer_function(size_t size, sc_boolean is_signed);
yet_value_serializer yet_real_serializer_function(size_t size);

extern char* yet_serialize_void(const void* from, char* to);
extern char* yet_serialize_bool(const void* from, char* to);
extern char* yet_serialize_float(const void* from, char* to);
extern char* yet_serialize_double(const void* from, char* to);
extern char*  yet_serialize_string(const void* from, char* to);
extern char* yet_serialize_int_8(const void* from, char* to);
extern char* yet_serialize_int_16(const void* from, char* to);
extern char* yet_serialize_int_32(const void* from, char* to);
extern char* yet_serialize_int_64(const void* from, char* to);
extern char* yet_serialize_uint_8(const void* from, char* to);
extern char* yet_serialize_uint_16(const void* from, char* to);
extern char* yet_serialize_uint_32(const void* from, char* to);
extern char* yet_serialize_uint_64(const void* from, char* to);

/* ================================================
 * Functions that need to be implemented by clients
 */		

/*! Function to retrieve the current timestamp (in milliseconds). */
extern yet_timestamp yet_current_timestamp();


#ifdef __cplusplus
}
#endif

#endif
