/** Generated by YAKINDU Statechart Tools code generator. */
package smarthub.java;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class Elevator_Unit implements IStatemachine, ITimed {
	public static class Direction {
		private Elevator_Unit parent;
		
		public Direction(Elevator_Unit parent) {
			this.parent = parent;
		}
		private boolean up;
		
		
		public void raiseUp() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					up = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean down;
		
		
		public void raiseDown() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					down = true;
				});
				parent.runCycle();
			}
		}
		
	}
	
	public static class Level {
		private Elevator_Unit parent;
		
		public Level(Elevator_Unit parent) {
			this.parent = parent;
		}
		private long current;
		
		public synchronized long getCurrent() {
			synchronized(parent) {
				return current;
			}
		}
		
		public void setCurrent(long value) {
			synchronized(parent) {
				this.current = value;
			}
		}
		
		private long userLocation;
		
		public synchronized long getUserLocation() {
			synchronized(parent) {
				return userLocation;
			}
		}
		
		public void setUserLocation(long value) {
			synchronized(parent) {
				this.userLocation = value;
			}
		}
		
		private long userInput;
		
		public synchronized long getUserInput() {
			synchronized(parent) {
				return userInput;
			}
		}
		
		public void setUserInput(long value) {
			synchronized(parent) {
				this.userInput = value;
			}
		}
		
	}
	
	public static class Input {
		private Elevator_Unit parent;
		
		public Input(Elevator_Unit parent) {
			this.parent = parent;
		}
		private boolean submit;
		
		
		public void raiseSubmit() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					submit = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean up;
		
		
		public void raiseUp() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					up = true;
				});
				parent.runCycle();
			}
		}
		
		private boolean down;
		
		
		public void raiseDown() {
			synchronized(parent) {
				parent.inEventQueue.add(() -> {
					down = true;
				});
				parent.runCycle();
			}
		}
		
		private long value;
		
		public synchronized long getValue() {
			synchronized(parent) {
				return value;
			}
		}
		
		public void setValue(long value) {
			synchronized(parent) {
				this.value = value;
			}
		}
		
	}
	
	protected Direction direction;
	
	protected Level level;
	
	protected Input input;
	
	public enum State {
		MAIN_REGION__ELEVATOR_UNAVAILABLE_,
		MAIN_REGION__ELEVATOR_AVAILABLE_,
		MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_,
		MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_,
		MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_,
		MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_,
		MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_,
		MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL_,
		MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_,
		MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_,
		MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[4];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean completed;
	
	protected boolean getCompleted() {
		synchronized(Elevator_Unit.this) {
			return completed;
		}
	}
	
	protected void setCompleted(boolean value) {
		synchronized(Elevator_Unit.this) {
			this.completed = value;
		}
	}
	private boolean doCompletion;
	
	protected boolean getDoCompletion() {
		synchronized(Elevator_Unit.this) {
			return doCompletion;
		}
	}
	
	protected void setDoCompletion(boolean value) {
		synchronized(Elevator_Unit.this) {
			this.doCompletion = value;
		}
	}
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(Elevator_Unit.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(Elevator_Unit.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(Elevator_Unit.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(Elevator_Unit.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public Elevator_Unit() {
		direction = new Direction(this);
		level = new Level(this);
		input = new Input(this);
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		level.setCurrent(0l);
		
		level.setUserLocation(0l);
		
		level.setUserInput(0l);
		
		input.setValue(0l);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		doCompletion = false;
		
		do { 
			if (getCompleted()) {
				doCompletion = true;
			}
			completed = false;
			
			microStep();
			
			doCompletion = false;
		} while (getCompleted());
		
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		toggle = false;
		stopped = false;
		inUse = false;
		direction.up = false;
		direction.down = false;
		input.submit = false;
		input.up = false;
		input.down = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		
		stateConfVectorPosition = 0l;
		
		switch (stateVector[0]) {
		case MAIN_REGION__ELEVATOR_UNAVAILABLE_:
			transitioned = main_region__Elevator_Unavailable__react(transitioned);
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_:
			transitioned = main_region__Elevator_Available__activity__idle__react(transitioned);
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_:
			transitioned = main_region__Elevator_Available__activity__active__react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_:
				transitioned = main_region__Elevator_Available__movement__upwards__react(transitioned);
				break;
			case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_:
				transitioned = main_region__Elevator_Available__movement__downwards__react(transitioned);
				break;
			case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_:
				transitioned = main_region__Elevator_Available__movement__standby__react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2l) {
			switch (stateVector[2]) {
			case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_:
				transitioned = main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator__react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3l) {
			switch (stateVector[3]) {
			case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_:
				main_region__Elevator_Available__input__gettingInput__react(transitioned);
				break;
			case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_:
				main_region__Elevator_Available__input__submitInput__react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			doCompletion = false;
			
			do { 
				if (getCompleted()) {
					doCompletion = true;
				}
				completed = false;
				
				microStep();
				
				doCompletion = false;
			} while (getCompleted());
			
			clearInEvents();
			
			nextEvent();
		} while (((((((((((toggle || stopped) || inUse) || direction.up) || direction.down) || input.submit) || input.up) || input.down) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION__ELEVATOR_UNAVAILABLE_:
			return stateVector[0] == State.MAIN_REGION__ELEVATOR_UNAVAILABLE_;
		case MAIN_REGION__ELEVATOR_AVAILABLE_:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION__ELEVATOR_AVAILABLE_.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_.ordinal();
		case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_:
			return stateVector[0] == State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_;
		case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_:
			return stateVector[0] == State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_;
		case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_:
			return stateVector[1] == State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_;
		case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_:
			return stateVector[1] == State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_;
		case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_:
			return stateVector[1] == State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_;
		case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL_:
			return stateVector[2].ordinal() >= State.
					MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL_.ordinal()&& stateVector[2].ordinal() <= State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_.ordinal();
		case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_:
			return stateVector[2] == State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_;
		case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_:
			return stateVector[3] == State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_;
		case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_:
			return stateVector[3] == State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	public Direction direction() {
		return direction;
	}
	
	public Level level() {
		return level;
	}
	
	public Input input() {
		return input;
	}
	
	
	private boolean toggle;
	
	
	public void raiseToggle() {
		synchronized(Elevator_Unit.this) {
			inEventQueue.add(() -> {
				toggle = true;
			});
			runCycle();
		}
	}
	
	private boolean stopped;
	
	
	public void raiseStopped() {
		synchronized(Elevator_Unit.this) {
			inEventQueue.add(() -> {
				stopped = true;
			});
			runCycle();
		}
	}
	
	private boolean inUse;
	
	
	public void raiseInUse() {
		synchronized(Elevator_Unit.this) {
			inEventQueue.add(() -> {
				inUse = true;
			});
			runCycle();
		}
	}
	
	/* Entry action for state '<upwards>'. */
	private void entryAction_main_region__Elevator_Available__movement__upwards_() {
		timerService.setTimer(this, 0, 100l, false);
	}
	
	/* Entry action for state '<downwards>'. */
	private void entryAction_main_region__Elevator_Available__movement__downwards_() {
		timerService.setTimer(this, 1, 100l, false);
	}
	
	/* Entry action for state '<readingDataFromElevator>'. */
	private void entryAction_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_() {
		timerService.setTimer(this, 2, 500l, false);
	}
	
	private void entryAction_main_region__Elevator_Available__input__submitInput_() {
		level.setUserInput(input.value);
		
		level.setUserLocation(input.value);
		
		completed = true;
	}
	
	/* Exit action for state '<upwards>'. */
	private void exitAction_main_region__Elevator_Available__movement__upwards_() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state '<downwards>'. */
	private void exitAction_main_region__Elevator_Available__movement__downwards_() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state '<readingDataFromElevator>'. */
	private void exitAction_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_() {
		timerService.unsetTimer(this, 2);
	}
	
	/* 'default' enter sequence for state <Elevator_Unavailable> */
	private void enterSequence_main_region__Elevator_Unavailable__default() {
		stateVector[0] = State.MAIN_REGION__ELEVATOR_UNAVAILABLE_;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state <Elevator_Available> */
	private void enterSequence_main_region__Elevator_Available__default() {
		enterSequence_main_region__Elevator_Available__activity_default();
		enterSequence_main_region__Elevator_Available__movement_default();
		enterSequence_main_region__Elevator_Available__level_default();
		enterSequence_main_region__Elevator_Available__input_default();
	}
	
	/* 'default' enter sequence for state <idle> */
	private void enterSequence_main_region__Elevator_Available__activity__idle__default() {
		stateVector[0] = State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state <active> */
	private void enterSequence_main_region__Elevator_Available__activity__active__default() {
		stateVector[0] = State.MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state <upwards> */
	private void enterSequence_main_region__Elevator_Available__movement__upwards__default() {
		entryAction_main_region__Elevator_Available__movement__upwards_();
		stateVector[1] = State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <downwards> */
	private void enterSequence_main_region__Elevator_Available__movement__downwards__default() {
		entryAction_main_region__Elevator_Available__movement__downwards_();
		stateVector[1] = State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <standby> */
	private void enterSequence_main_region__Elevator_Available__movement__standby__default() {
		stateVector[1] = State.MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state <ElevatorLevel> */
	private void enterSequence_main_region__Elevator_Available__level__ElevatorLevel__default() {
		enterSequence_main_region__Elevator_Available__level__ElevatorLevel__r1_default();
	}
	
	/* 'default' enter sequence for state <readingDataFromElevator> */
	private void enterSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator__default() {
		entryAction_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
		stateVector[2] = State.MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state <gettingInput> */
	private void enterSequence_main_region__Elevator_Available__input__gettingInput__default() {
		stateVector[3] = State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for state <submitInput> */
	private void enterSequence_main_region__Elevator_Available__input__submitInput__default() {
		entryAction_main_region__Elevator_Available__input__submitInput_();
		stateVector[3] = State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region activity */
	private void enterSequence_main_region__Elevator_Available__activity_default() {
		react_main_region__Elevator_Available__activity__entry_Default();
	}
	
	/* 'default' enter sequence for region movement */
	private void enterSequence_main_region__Elevator_Available__movement_default() {
		react_main_region__Elevator_Available__movement__entry_Default();
	}
	
	/* 'default' enter sequence for region level */
	private void enterSequence_main_region__Elevator_Available__level_default() {
		react_main_region__Elevator_Available__level__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region__Elevator_Available__level__ElevatorLevel__r1_default() {
		react_main_region__Elevator_Available__level__ElevatorLevel__r1__entry_Default();
	}
	
	/* 'default' enter sequence for region input */
	private void enterSequence_main_region__Elevator_Available__input_default() {
		react_main_region__Elevator_Available__input__entry_Default();
	}
	
	/* Default exit sequence for state <Elevator_Unavailable> */
	private void exitSequence_main_region__Elevator_Unavailable_() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state <Elevator_Available> */
	private void exitSequence_main_region__Elevator_Available_() {
		exitSequence_main_region__Elevator_Available__activity();
		exitSequence_main_region__Elevator_Available__movement();
		exitSequence_main_region__Elevator_Available__level();
		exitSequence_main_region__Elevator_Available__input();
	}
	
	/* Default exit sequence for state <idle> */
	private void exitSequence_main_region__Elevator_Available__activity__idle_() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state <active> */
	private void exitSequence_main_region__Elevator_Available__activity__active_() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state <upwards> */
	private void exitSequence_main_region__Elevator_Available__movement__upwards_() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region__Elevator_Available__movement__upwards_();
	}
	
	/* Default exit sequence for state <downwards> */
	private void exitSequence_main_region__Elevator_Available__movement__downwards_() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region__Elevator_Available__movement__downwards_();
	}
	
	/* Default exit sequence for state <standby> */
	private void exitSequence_main_region__Elevator_Available__movement__standby_() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state <ElevatorLevel> */
	private void exitSequence_main_region__Elevator_Available__level__ElevatorLevel_() {
		exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1();
	}
	
	/* Default exit sequence for state <readingDataFromElevator> */
	private void exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		
		exitAction_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
	}
	
	/* Default exit sequence for state <gettingInput> */
	private void exitSequence_main_region__Elevator_Available__input__gettingInput_() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for state <submitInput> */
	private void exitSequence_main_region__Elevator_Available__input__submitInput_() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION__ELEVATOR_UNAVAILABLE_:
			exitSequence_main_region__Elevator_Unavailable_();
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_:
			exitSequence_main_region__Elevator_Available__activity__idle_();
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_:
			exitSequence_main_region__Elevator_Available__activity__active_();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_:
			exitSequence_main_region__Elevator_Available__movement__upwards_();
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_:
			exitSequence_main_region__Elevator_Available__movement__downwards_();
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_:
			exitSequence_main_region__Elevator_Available__movement__standby_();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_:
			exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_:
			exitSequence_main_region__Elevator_Available__input__gettingInput_();
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_:
			exitSequence_main_region__Elevator_Available__input__submitInput_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region activity */
	private void exitSequence_main_region__Elevator_Available__activity() {
		switch (stateVector[0]) {
		case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__IDLE_:
			exitSequence_main_region__Elevator_Available__activity__idle_();
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__ACTIVITY__ACTIVE_:
			exitSequence_main_region__Elevator_Available__activity__active_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region movement */
	private void exitSequence_main_region__Elevator_Available__movement() {
		switch (stateVector[1]) {
		case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__UPWARDS_:
			exitSequence_main_region__Elevator_Available__movement__upwards_();
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__DOWNWARDS_:
			exitSequence_main_region__Elevator_Available__movement__downwards_();
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__MOVEMENT__STANDBY_:
			exitSequence_main_region__Elevator_Available__movement__standby_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region level */
	private void exitSequence_main_region__Elevator_Available__level() {
		switch (stateVector[2]) {
		case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_:
			exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1() {
		switch (stateVector[2]) {
		case MAIN_REGION__ELEVATOR_AVAILABLE__LEVEL__ELEVATORLEVEL__R1__READINGDATAFROMELEVATOR_:
			exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region input */
	private void exitSequence_main_region__Elevator_Available__input() {
		switch (stateVector[3]) {
		case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_:
			exitSequence_main_region__Elevator_Available__input__gettingInput_();
			break;
		case MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__SUBMITINPUT_:
			exitSequence_main_region__Elevator_Available__input__submitInput_();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region__Elevator_Unavailable__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__Elevator_Available__activity__entry_Default() {
		enterSequence_main_region__Elevator_Available__activity__idle__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__Elevator_Available__movement__entry_Default() {
		enterSequence_main_region__Elevator_Available__movement__standby__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__Elevator_Available__level__entry_Default() {
		enterSequence_main_region__Elevator_Available__level__ElevatorLevel__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__Elevator_Available__level__ElevatorLevel__r1__entry_Default() {
		enterSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator__default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__Elevator_Available__input__entry_Default() {
		enterSequence_main_region__Elevator_Available__input__gettingInput__default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region__Elevator_Unavailable__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<0l) {
				if (toggle) {
					exitSequence_main_region__Elevator_Unavailable_();
					enterSequence_main_region__Elevator_Available__default();
					react(0l);
					
					transitioned_after = 0l;
				}
			}
			/* If no transition was taken then execute local reactions */
			if (transitioned_after==transitioned_before) {
				transitioned_after = react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long main_region__Elevator_Available__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<0l) {
				if (toggle) {
					exitSequence_main_region__Elevator_Available_();
					enterSequence_main_region__Elevator_Unavailable__default();
					react(0l);
					
					transitioned_after = 3l;
				}
			}
			/* If no transition was taken then execute local reactions */
			if (transitioned_after==transitioned_before) {
				transitioned_after = react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long main_region__Elevator_Available__activity__idle__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<0l) {
				if (inUse) {
					exitSequence_main_region__Elevator_Available__activity__idle_();
					enterSequence_main_region__Elevator_Available__activity__active__default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region__Elevator_Available__activity__active__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<0l) {
				if (stopped) {
					exitSequence_main_region__Elevator_Available__activity__active_();
					enterSequence_main_region__Elevator_Available__activity__idle__default();
					transitioned_after = 0l;
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region__Elevator_Available__movement__upwards__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<1l) {
				if (direction.down) {
					exitSequence_main_region__Elevator_Available__movement__upwards_();
					enterSequence_main_region__Elevator_Available__movement__downwards__default();
					transitioned_after = 1l;
				} else {
					if (stopped) {
						exitSequence_main_region__Elevator_Available__movement__upwards_();
						enterSequence_main_region__Elevator_Available__movement__standby__default();
						transitioned_after = 1l;
					} else {
						if (timeEvents[0]) {
							exitSequence_main_region__Elevator_Available__movement__upwards_();
							level.current++;
							
							timeEvents[0] = false;
							enterSequence_main_region__Elevator_Available__movement__upwards__default();
							transitioned_after = 1l;
						}
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region__Elevator_Available__movement__downwards__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<1l) {
				if (direction.up) {
					exitSequence_main_region__Elevator_Available__movement__downwards_();
					enterSequence_main_region__Elevator_Available__movement__upwards__default();
					transitioned_after = 1l;
				} else {
					if (inUse) {
						exitSequence_main_region__Elevator_Available__movement__downwards_();
						enterSequence_main_region__Elevator_Available__movement__standby__default();
						transitioned_after = 1l;
					} else {
						if (timeEvents[1]) {
							exitSequence_main_region__Elevator_Available__movement__downwards_();
							level.current--;
							
							timeEvents[1] = false;
							enterSequence_main_region__Elevator_Available__movement__downwards__default();
							transitioned_after = 1l;
						}
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region__Elevator_Available__movement__standby__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<1l) {
				if (direction.down) {
					exitSequence_main_region__Elevator_Available__movement__standby_();
					enterSequence_main_region__Elevator_Available__movement__downwards__default();
					transitioned_after = 1l;
				} else {
					if (direction.up) {
						exitSequence_main_region__Elevator_Available__movement__standby_();
						enterSequence_main_region__Elevator_Available__movement__upwards__default();
						transitioned_after = 1l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region__Elevator_Available__level__ElevatorLevel__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<2l) {
				if (level.getCurrent()>level.getUserLocation()) {
					exitSequence_main_region__Elevator_Available__level__ElevatorLevel_();
					direction.raiseDown();
					
					enterSequence_main_region__Elevator_Available__level__ElevatorLevel__default();
					transitioned_after = 2l;
				} else {
					if (level.getCurrent()<level.getUserLocation()) {
						exitSequence_main_region__Elevator_Available__level__ElevatorLevel_();
						direction.raiseUp();
						
						enterSequence_main_region__Elevator_Available__level__ElevatorLevel__default();
						transitioned_after = 2l;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<2l) {
				if (((timeEvents[2]) && (level.getCurrent()==level.getUserLocation()))) {
					exitSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator_();
					raiseStopped();
					
					timeEvents[2] = false;
					enterSequence_main_region__Elevator_Available__level__ElevatorLevel__r1__readingDataFromElevator__default();
					main_region__Elevator_Available__level__ElevatorLevel__react(2l);
					
					transitioned_after = 2l;
				}
			}
			/* If no transition was taken then execute local reactions */
			if (transitioned_after==transitioned_before) {
				transitioned_after = main_region__Elevator_Available__level__ElevatorLevel__react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long main_region__Elevator_Available__input__gettingInput__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (!getDoCompletion()) {
			if (transitioned_after<3l) {
				if (input.submit) {
					exitSequence_main_region__Elevator_Available__input__gettingInput_();
					enterSequence_main_region__Elevator_Available__input__submitInput__default();
					main_region__Elevator_Available__react(0l);
					
					transitioned_after = 3l;
				} else {
					if (input.up) {
						exitSequence_main_region__Elevator_Available__input__gettingInput_();
						input.value++;
						
						enterSequence_main_region__Elevator_Available__input__gettingInput__default();
						main_region__Elevator_Available__react(0l);
						
						transitioned_after = 3l;
					} else {
						if (input.down) {
							exitSequence_main_region__Elevator_Available__input__gettingInput_();
							input.value--;
							
							enterSequence_main_region__Elevator_Available__input__gettingInput__default();
							main_region__Elevator_Available__react(0l);
							
							transitioned_after = 3l;
						}
					}
				}
			}
			/* If no transition was taken then execute local reactions */
			if (transitioned_after==transitioned_before) {
				transitioned_after = main_region__Elevator_Available__react(transitioned_before);
			}
		}
		return transitioned_after;
	}
	
	private long main_region__Elevator_Available__input__submitInput__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (getDoCompletion()) {
			stateVector[3] = State.$NULLSTATE$;
			stateConfVectorPosition = 3;
			
			stateVector[3] = State.MAIN_REGION__ELEVATOR_AVAILABLE__INPUT__GETTINGINPUT_;
			stateConfVectorPosition = 3;
			
			main_region__Elevator_Available__react(0l);
		} else {
			if (transitioned_after<3l) {
			}
			/* If no transition was taken then execute local reactions */
			if (transitioned_after==transitioned_before) {
				transitioned_after = main_region__Elevator_Available__react(transitioned_before);
			}
		}
		
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public synchronized void triggerWithoutEvent() {
		runCycle();
	}
}
